{"version":3,"names":["downloadFromBuffer","value","name","extension","mime","blob","Blob","type","navigator","msSaveBlob","Promise","resolve","setTimeout","blobURL","window","URL","createObjectURL","link","document","createElement","frame","style","display","body","appendChild","href","target","download","dispatchEvent","MouseEvent","removeChild","ARRAY_BUFFER_NAME","BufferSourceConverter","isArrayBuffer","data","Object","prototype","toString","call","toArrayBuffer","this","byteLength","buffer","byteOffset","toUint8Array","slice","toView","Uint8Array","constructor","isArrayBufferView","TypeError","isBufferSource","ArrayBuffer","isView","isEqual","a","b","aView","bView","length","i","concat","args","buffers","Array","isArray","Function","size","res","offset","view","set","STRING_TYPE","HEX_REGEX","BASE64_REGEX","BASE64URL_REGEX","Utf8Converter","fromString","text","s","unescape","encodeURIComponent","uintArray","charCodeAt","buf","encodedString","String","fromCharCode","decodedString","decodeURIComponent","escape","Utf16Converter","littleEndian","arrayBuffer","dataView","DataView","code","getUint16","setUint16","Convert","isHex","test","isBase64","isBase64Url","ToString","enc","toLowerCase","ToUtf8String","ToBinary","ToHex","ToBase64","ToBase64Url","Error","FromString","str","FromUtf8String","FromBinary","FromHex","FromBase64","FromBase64Url","btoa","binary","Buffer","from","base64","formatted","formatString","atob","base64url","Base64Padding","replace","encoding","DEFAULT_UTF8_ENCODING","stringLength","resultView","result","len","byte","hexString","c","parseInt","ToUtf16String","FromUtf16String","padCount","bytes1","bytes2","b1","b2","Download","cert","asPEM","pem","asDER","hex","attrCert","csr","crl"],"sources":["src/utils/download_from_buffer.ts","../../node_modules/pvtsutils/build/index.js","src/utils/download.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Download from buffer\n *\n * @example\n * ```js\n *    import { downloadFromBuffer } from './utils';\n *\n *    downloadFromBuffer(arrayBufferValue, 'myFile', 'pdf', 'applciation/pdf');\n * ```\n */\n\nexport function downloadFromBuffer(\n  value: ArrayBuffer,\n  name: string,\n  extension: string,\n  mime: string = 'application/octet-stream',\n) {\n  const blob = new Blob([value], { type: mime });\n\n  // @ts-ignore\n  if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n    // @ts-ignore\n    navigator.msSaveBlob(blob, `${name}.${extension}`);\n\n    return new Promise((resolve) => {\n      setTimeout(resolve, 100);\n    });\n  }\n\n  const blobURL = window.URL.createObjectURL(blob);\n\n  const link = document.createElement('a');\n  const frame = document.createElement('iframe');\n\n  link.style.display = 'none';\n  frame.style.display = 'none';\n\n  frame.name = blobURL;\n  document.body.appendChild(frame);\n\n  link.href = blobURL;\n  link.target = blobURL;\n  link.download = `${name}.${extension}`;\n  document.body.appendChild(link);\n  link.dispatchEvent(new MouseEvent('click'));\n  document.body.removeChild(link);\n\n  return new Promise<void>((resolve) => {\n    setTimeout(\n      () => {\n        document.body.removeChild(frame);\n        resolve();\n      },\n      100,\n    );\n  });\n}\n","/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n'use strict';\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data.buffer)\n            .slice(data.byteOffset, data.byteOffset + data.byteLength)\n            .buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data)\n            || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data)\n            || (data && this.isArrayBuffer(data.buffer));\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < aView.length; i++) {\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        let buffers;\n        if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {\n            buffers = args[0];\n        }\n        else if (Array.isArray(args[0]) && args[1] instanceof Function) {\n            buffers = args[0];\n        }\n        else {\n            if (args[args.length - 1] instanceof Function) {\n                buffers = args.slice(0, args.length - 1);\n            }\n            else {\n                buffers = args;\n            }\n        }\n        let size = 0;\n        for (const buffer of buffers) {\n            size += buffer.byteLength;\n        }\n        const res = new Uint8Array(size);\n        let offset = 0;\n        for (const buffer of buffers) {\n            const view = this.toUint8Array(buffer);\n            res.set(view, offset);\n            offset += view.length;\n        }\n        if (args[args.length - 1] instanceof Function) {\n            return this.toView(res, args[args.length - 1]);\n        }\n        return res.buffer;\n    }\n}\n\nconst STRING_TYPE = \"string\";\nconst HEX_REGEX = /^[0-9a-f]+$/i;\nconst BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\nconst BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) {\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for (let i = 0; i < text.length; i++) {\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === STRING_TYPE\n            && HEX_REGEX.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === STRING_TYPE\n            && BASE64_REGEX.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === STRING_TYPE\n            && BASE64URL_REGEX.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        }\n        else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        }\n        else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for (let i = 0; i < stringLength; i++) {\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let result = \"\";\n        const len = buf.length;\n        for (let i = 0; i < len; i++) {\n            const byte = buf[i];\n            if (byte < 16) {\n                result += \"0\";\n            }\n            result += byte.toString(16);\n        }\n        return result;\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for (let i = 0; i < formatted.length; i = i + 2) {\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - (base64.length % 4);\n        if (padCount < 4) {\n            for (let i = 0; i < padCount; i++) {\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for (let i = 1; i < arguments.length; i++) {\n        const obj = arguments[i];\n        for (const prop in obj) {\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\n        for (const item2 of arr) {\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\n\nimport { downloadFromBuffer } from './download_from_buffer';\n\nexport class Download {\n  public static cert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n  };\n\n  public static attrCert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n  };\n\n  public static csr = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n  };\n\n  public static crl = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n  };\n}\n"],"mappings":"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"}