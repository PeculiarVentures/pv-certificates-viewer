{"version":3,"names":["CertificateSummary","props","certificate","showIssuer","renderRow","name","value","h","Typography","variant","color","l10n","getString","subjectToString","issuerToString","serialNumber","version","validity","dateShort","notBefore","notAfter","certificatesViewerCss","PeculiarCertificatesViewerStyle0","CertificatesViewer","this","isHasRoots","handleClickDetails","certificateSelectedForDetails","detailsOpen","emit","handleModalClose","undefined","detailsClose","handleSearch","event","search","target","trim","handleMediaQueryChange","mobileScreenView","matches","componentWillLoad","certificatesDecodeAndSet","mobileMediaQuery","window","matchMedia","mobileMediaQueryString","addEventListener","bind","disconnectedCallback","removeEventListener","watchCertificates","newValue","oldValue","JSON","stringify","hasRoots","Array","isArray","certificates","data","decoded","X509Certificate","getThumbprint","push","body","tests","isRoot","error","console","isDecodeInProcess","certificatesDecoded","handleClickDownloadAsPem","downloadAsPEM","commonName","handleClickDownloadAsDer","downloadAsDER","handleClickRow","index","isExpandedRowClicked","expandedRow","getMaxColSpanValue","colSpan","renderCertificateButtonActions","isHasTestURLs","expired","revoked","valid","class","groups","title","options","text","startIcon","DetailsIcon","onClick","DownloadIcon","_a","href","LinkIcon","_b","_c","renderExpandedRow","renderCertificatesRows","searchHighlight","highlightWithSearch","content","forEach","isExpandedRow","publicKeyValue","OIDs","signature","algorithm","filterWithSearch","certificateStringForSearch","issuerCommonName","thumbprints","join","toLowerCase","indexOf","certificate_row","m_expanded","key","Button","ArrowTopIcon","ArrowBottomIcon","renderCertificateDetailsModal","role","part","CrossIcon","renderSearch","onInput","type","disabled","length","placeholder","renderEmptyState","renderEmptySearchState","renderLoadingState","renderTableBody","certificatesRows","render","Host","String"],"sources":["src/components/certificate-summary/certificate-summary.tsx","src/components/certificates-viewer/certificates-viewer.scss?tag=peculiar-certificates-viewer&encapsulation=shadow","src/components/certificates-viewer/certificates-viewer.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { FunctionalComponent, h } from '@stencil/core';\nimport type { X509Certificate } from '../../crypto';\nimport { dateShort, l10n } from '../../utils';\nimport { Typography } from '../typography';\n\ninterface CertificateSummaryProps {\n  certificate: X509Certificate;\n  showIssuer?: boolean;\n}\n\nexport const CertificateSummary: FunctionalComponent<CertificateSummaryProps> = (props) => {\n  const {\n    certificate,\n    showIssuer,\n  } = props;\n\n  const renderRow = (name: string | string[], value: string | number) => (\n    <tr>\n      <td>\n        <Typography\n          variant=\"b2\"\n          color=\"gray-9\"\n        >\n          {name}\n        </Typography>\n      </td>\n      <td>\n        <Typography\n          variant=\"b2\"\n          color=\"black\"\n        >\n          {value}\n        </Typography>\n      </td>\n    </tr>\n  );\n\n  return (\n    <table>\n      <tbody>\n        {renderRow(\n          l10n.getString('subjectName'),\n          certificate.subjectToString(),\n        )}\n        {showIssuer && renderRow(\n          l10n.getString('issuerName'),\n          certificate.issuerToString(),\n        )}\n\n        {renderRow(\n          l10n.getString('serialNumber'),\n          certificate.serialNumber,\n        )}\n        {renderRow(\n          l10n.getString('version'),\n          certificate.version,\n        )}\n        {renderRow(\n          l10n.getString('validity'),\n          certificate.validity,\n        )}\n        {renderRow(\n          l10n.getString('issued'),\n          dateShort(certificate.notBefore),\n        )}\n        {renderRow(\n          l10n.getString('expired'),\n          dateShort(certificate.notAfter),\n        )}\n      </tbody>\n    </table>\n  );\n};\n","@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n  word-wrap: break-word;\n  min-width: 280px;\n  overflow: auto;\n  position: relative;\n}\n\n.search_section {\n  padding: var(--pv-size-base-4);\n  border-bottom: 1px solid var(--pv-color-gray-4);\n}\n\n.input_search {\n  height: var(--pv-size-base-8);\n  width: 100%;\n  outline: none;\n  background-color: var(--pv-color-gray-1);\n  padding: 0 var(--pv-size-base-2);\n  border: 1px solid var(--pv-color-gray-7);\n  border-radius: 4px;\n  transition: background-color 200ms ease 0s, color 200ms ease 0s, border-color 200ms ease 0s;\n  &::placeholder {\n    color: var(--pv-color-gray-9);\n  }\n}\n\ntable {\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: collapse;\n  border-spacing: 0;\n\n  td, th {\n    border-bottom: 1px solid var(--pv-color-gray-4);\n    vertical-align: top;\n    text-align: left;\n\n    &:first-child {\n      padding-right: 0;\n      width: var(--pv-size-base-10);\n    }\n    &:last-child {\n      padding-left: 0;\n      width: var(--pv-size-base-10);\n    }\n  }\n\n  th {\n    padding: var(--pv-size-base-2) var(--pv-size-base-4);\n\n    &.col_action {\n      padding: 0;\n    }\n  }\n\n  td {\n    padding: var(--pv-size-base-4);\n  }\n\n  tr {\n    &.m_expanded {\n      background: var(--pv-color-gray-1);\n\n      > td {\n        border-bottom: none;\n      }\n    }\n\n    &.expanded_summary {\n      background: var(--pv-color-gray-1);\n\n      table {\n        table-layout: initial;\n\n        td {\n          border-bottom: none;\n          padding: var(--pv-size-base-2);\n\n          &:first-child {\n            width: 200px;\n          }\n\n          &:last-child {\n            width: auto;\n          }\n        }\n      }\n    }\n  }\n}\n\n.button_table_cell {\n  margin-top: -3px;\n}\n\n.status_wrapper {\n  text-align: center;\n  height: var(--pv-size-base-16);\n  vertical-align: middle;\n}\n\n.modal_wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  animation: fadeIn 200ms;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal_backdrop {\n  background: var(--pv-color-black);\n  z-index: -1;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  opacity: 0.5;\n}\n\n.modal_container {\n  background: var(--pv-color-white);\n  width: 100%;\n  display: flex;\n  max-height: calc(100% - 60px);\n  flex-direction: column;\n  margin: var(--pv-size-base-6);\n  position: relative;\n  outline: none;\n  box-shadow: var(--pv-shadow-dark-hight);\n  overflow: hidden;\n  border: 0px;\n  padding: 0px;\n  max-width: 640px;\n  border-radius: 4px;\n}\n\n.modal_header {\n  padding: var(--pv-size-base-3) var(--pv-size-base-4);\n  display: flex;\n  flex: 0 0 auto;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n  gap: var(--pv-size-base-2);\n  border-bottom: 1px solid var(--pv-color-gray-5);\n}\n\n.modal_content {\n  flex: 1 1 auto;\n  overflow: auto;\n}\n\n:host([data-mobile-screen-view=\"true\"]) {\n  table, tbody, tr, td {\n    display: block;\n    width: 100% !important;\n    padding: 0;\n    border: none;\n  }\n\n  thead {\n    display: none;\n  }\n\n  table {\n    tr {\n      padding: var(--pv-size-base-2) 0;\n    }\n\n    .expanded_summary {\n      padding: 0;\n    }\n\n    .certificate_row {\n      border-bottom: 1px solid var(--pv-color-gray-5);\n      padding: var(--pv-size-base-2) var(--pv-size-base-4);\n    }\n\n    .certificate_row_actions {\n      padding-top: var(--pv-size-base-6);\n\n      td {\n        display: flex;\n        justify-content: right;\n        gap: var(--pv-size-base-4);\n      }\n    }\n  }\n\n  .button_table_cell {\n    margin-top: 0;\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  h,\n  Prop,\n  State,\n  Watch,\n  Host,\n  Event,\n  EventEmitter,\n  Build,\n} from '@stencil/core';\n\nimport { X509Certificate } from '../../crypto';\nimport { OIDs } from '../../constants/oids';\nimport { l10n } from '../../utils';\nimport { Typography } from '../typography';\nimport { CertificateSummary } from '../certificate-summary';\nimport { Button } from '../button';\nimport {\n  DownloadIcon,\n  LinkIcon,\n  DetailsIcon,\n  ArrowBottomIcon,\n  ArrowTopIcon,\n  CrossIcon,\n} from '../icons';\n\nexport interface ICertificate {\n  value: string;\n  name?: string;\n  tests?: {\n    valid?: string;\n    revoked?: string;\n    expired?: string;\n  };\n}\n\ninterface ICertificateDecoded {\n  body: X509Certificate;\n  tests?: ICertificate['tests'];\n  name?: string;\n}\n\n@Component({\n  tag: 'peculiar-certificates-viewer',\n  styleUrl: 'certificates-viewer.scss',\n  shadow: true,\n})\nexport class CertificatesViewer {\n  private isHasRoots: boolean = false;\n\n  private mobileMediaQuery: MediaQueryList;\n\n  /**\n   * List of certificates values for decode and show in the list.\n   * <br />\n   * **NOTE**: If you do not provide a `name` value when\n   * invocing the component it will take the first Subject CN value.\n   * <br />\n   * **NOTE**: If you do not provide a `tests` this column will be ommited from the rendered page.\n   * <br />\n   * **NOTE**: If the supplied certificates are self-signed the issuer column will be ommited.\n   */\n  @Prop() certificates: ICertificate[] = [];\n\n  /**\n   * Use filter in the list when search is changed.\n   */\n  @Prop() filterWithSearch: boolean = true;\n\n  /**\n   * Use highlight chapters in the list when search is changed.\n   */\n  @Prop() highlightWithSearch: boolean = true;\n\n  /**\n   * Mobile media query string to control screen view change.\n   * <br />\n   * **NOTE**: Based on https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia.\n   * @example\n   *  (max-width: 900px)\n   */\n  @Prop({ reflect: false }) mobileMediaQueryString?: string = '(max-width: 900px)';\n\n  /**\n   * Emitted when the user open certificate details modal.\n   */\n  @Event() detailsOpen!: EventEmitter<X509Certificate>;\n\n  /**\n   * Emitted when the user close certificate details modal.\n   */\n  @Event() detailsClose!: EventEmitter<void>;\n\n  @State() mobileScreenView: boolean = false;\n\n  @State() search: string = '';\n\n  @State() certificatesDecoded: ICertificateDecoded[] = [];\n\n  @State() expandedRow?: number;\n\n  @State() certificateSelectedForDetails?: X509Certificate;\n\n  @State() isDecodeInProcess: boolean = true;\n\n  private handleMediaQueryChange(event: MediaQueryListEvent) {\n    this.mobileScreenView = event.matches;\n  }\n\n  componentWillLoad() {\n    this.certificatesDecodeAndSet();\n\n    if (Build.isBrowser) {\n      this.mobileMediaQuery = window.matchMedia(this.mobileMediaQueryString);\n      this.mobileMediaQuery.addEventListener('change', this.handleMediaQueryChange.bind(this));\n      this.mobileScreenView = this.mobileMediaQuery.matches;\n    }\n  }\n\n  disconnectedCallback() {\n    this.mobileMediaQuery.removeEventListener('change', this.handleMediaQueryChange.bind(this));\n  }\n\n  @Watch('certificates')\n  watchCertificates(newValue: ICertificate[], oldValue: ICertificate[]) {\n    /**\n     * Prevent rerender after set the same `certificates` prop.\n     */\n    if (JSON.stringify(newValue) !== JSON.stringify(oldValue)) {\n      this.certificatesDecodeAndSet();\n    }\n  }\n\n  async certificatesDecodeAndSet() {\n    let hasRoots = false;\n\n    if (!Array.isArray(this.certificates)) {\n      return;\n    }\n\n    const data: ICertificateDecoded[] = [];\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const certificate of this.certificates) {\n      try {\n        const decoded = new X509Certificate(certificate.value);\n\n        await decoded.getThumbprint('SHA-1');\n\n        data.push({\n          body: decoded,\n          tests: certificate.tests,\n          name: certificate.name,\n        });\n\n        if (!hasRoots && decoded.isRoot) {\n          hasRoots = true;\n        }\n      } catch (error) {\n        console.error('Error certificate parse:', error);\n      }\n    }\n\n    this.isHasRoots = hasRoots;\n    this.isDecodeInProcess = false;\n    this.certificatesDecoded = data;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private handleClickDownloadAsPem(certificate: ICertificateDecoded) {\n    certificate.body.downloadAsPEM(certificate.name || certificate.body.commonName);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private handleClickDownloadAsDer(certificate: ICertificateDecoded) {\n    certificate.body.downloadAsDER(certificate.name || certificate.body.commonName);\n  }\n\n  private handleClickDetails = (certificate: X509Certificate) => {\n    this.certificateSelectedForDetails = certificate;\n    this.detailsOpen.emit(certificate);\n  };\n\n  private handleModalClose = () => {\n    this.certificateSelectedForDetails = undefined;\n\n    this.detailsClose.emit();\n  };\n\n  private handleClickRow(index: number) {\n    const isExpandedRowClicked = this.expandedRow === index;\n\n    this.expandedRow = isExpandedRowClicked\n      ? undefined\n      : index;\n  }\n\n  private handleSearch = (event: any) => {\n    this.search = event.target.value.trim();\n  };\n\n  private getMaxColSpanValue() {\n    let colSpan = 5;\n\n    if (!this.isHasRoots) {\n      colSpan += 1;\n    }\n\n    return colSpan;\n  }\n\n  private renderCertificateButtonActions(certificate: ICertificateDecoded) {\n    const isHasTestURLs = certificate.tests\n        && (certificate.tests.expired || certificate.tests.revoked || certificate.tests.valid);\n\n    return (\n      <peculiar-button-menu\n        class=\"button_table_cell\"\n        groups={[\n          {\n            title: l10n.getString('previewCertificate'),\n            options: [\n              {\n                text: l10n.getString('viewDetails'),\n                startIcon: <DetailsIcon />,\n                onClick: () => this.handleClickDetails(certificate.body),\n              },\n            ],\n          },\n          {\n            title: l10n.getString('downloadOptions'),\n            options: [\n              {\n                text: l10n.getString('download.pem'),\n                startIcon: <DownloadIcon />,\n                onClick: () => this.handleClickDownloadAsPem(certificate),\n              },\n              {\n                text: l10n.getString('download.der'),\n                startIcon: <DownloadIcon />,\n                onClick: () => this.handleClickDownloadAsDer(certificate),\n              },\n            ],\n          },\n          ...(isHasTestURLs ? [{\n            title: l10n.getString('testURLs'),\n            options: [\n              ...(certificate.tests?.valid ? [{\n                text: l10n.getString('valid'),\n                href: certificate.tests.valid,\n                startIcon: <LinkIcon />,\n              }] : []),\n              ...(certificate.tests?.revoked ? [{\n                text: l10n.getString('revoked'),\n                href: certificate.tests.revoked,\n                startIcon: <LinkIcon />,\n              }] : []),\n              ...(certificate.tests?.expired ? [{\n                text: l10n.getString('expired'),\n                href: certificate.tests.expired,\n                startIcon: <LinkIcon />,\n              }] : []),\n            ],\n          }] : []),\n        ]}\n      />\n    );\n  }\n\n  private renderExpandedRow(certificate: X509Certificate) {\n    const colSpan = this.getMaxColSpanValue() - 2;\n\n    return (\n      <tr class=\"expanded_summary\">\n        <td />\n        <td colSpan={colSpan}>\n          <CertificateSummary\n            certificate={certificate}\n            showIssuer={!certificate.isRoot}\n          />\n        </td>\n        <td />\n      </tr>\n    );\n  }\n\n  private renderCertificatesRows() {\n    const searchHighlight = this.highlightWithSearch\n      ? this.search\n      : '';\n    const content = [];\n\n    this.certificatesDecoded.forEach((certificate, index) => {\n      const isExpandedRow = index === this.expandedRow;\n      const publicKeyValue = OIDs[certificate.body.signature.algorithm]\n        || certificate.body.signature.algorithm;\n\n      if (this.filterWithSearch && this.search) {\n        const certificateStringForSearch = [\n          publicKeyValue,\n          certificate.body.issuerCommonName,\n          certificate.name,\n          certificate.body.commonName,\n          certificate.body.thumbprints['SHA-1'],\n        ]\n          .join(' ')\n          .toLowerCase();\n\n        if (certificateStringForSearch.indexOf(this.search.toLowerCase()) === -1) {\n          return;\n        }\n      }\n\n      if (this.mobileScreenView) {\n        content.push([\n          <tr\n            class={{\n              certificate_row: true,\n              m_expanded: isExpandedRow,\n            }}\n            key={certificate.body.thumbprints['SHA-1']}\n          >\n            <td>\n              <table>\n                <tbody>\n                  {!this.isHasRoots && (\n                    <tr>\n                      <td>\n                        <Typography variant=\"b2\" color=\"gray-9\">\n                          {l10n.getString('issuer')}\n                        </Typography>\n                      </td>\n                      <td>\n                        <Typography variant=\"b2\" color=\"black\">\n                          <peculiar-highlight-words search={searchHighlight}>\n                            {certificate.body.issuerCommonName}\n                          </peculiar-highlight-words>\n                        </Typography>\n                      </td>\n                    </tr>\n                  )}\n                  <tr>\n                    <td>\n                      <Typography variant=\"b2\" color=\"gray-9\">\n                        {l10n.getString('name')}\n                      </Typography>\n                    </td>\n                    <td>\n                      <Typography variant=\"b2\" color=\"black\">\n                        <peculiar-highlight-words search={searchHighlight}>\n                          {certificate.name || certificate.body.commonName}\n                        </peculiar-highlight-words>\n                      </Typography>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <Typography variant=\"b2\" color=\"gray-9\">\n                        {l10n.getString('publicKey')}\n                      </Typography>\n                    </td>\n                    <td>\n                      <Typography variant=\"b2\" color=\"black\">\n                        <peculiar-highlight-words search={searchHighlight}>\n                          {publicKeyValue}\n                        </peculiar-highlight-words>\n                      </Typography>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <Typography variant=\"b2\" color=\"gray-9\">\n                        {l10n.getString('fingerprint')}\n                        &nbsp; (SHA-1)\n                      </Typography>\n                    </td>\n                    <td>\n                      <Typography variant=\"b2\" color=\"black\">\n                        <peculiar-highlight-words search={searchHighlight}>\n                          {certificate.body.thumbprints['SHA-1']}\n                        </peculiar-highlight-words>\n                      </Typography>\n                    </td>\n                  </tr>\n                  {isExpandedRow && this.renderExpandedRow(certificate.body)}\n                  <tr class=\"certificate_row_actions\">\n                    <td>\n                      {this.renderCertificateButtonActions(certificate)}\n                      <Button\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={this.handleClickRow.bind(this, index)}\n                        startIcon={isExpandedRow ? <ArrowTopIcon /> : <ArrowBottomIcon />}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </td>\n          </tr>,\n        ]);\n\n        return;\n      }\n\n      content.push([\n        <tr\n          class={{\n            m_expanded: isExpandedRow,\n          }}\n          key={certificate.body.thumbprints['SHA-1']}\n        >\n          <td>\n            <Button\n              class=\"button_table_cell\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={this.handleClickRow.bind(this, index)}\n              startIcon={isExpandedRow ? <ArrowTopIcon /> : <ArrowBottomIcon />}\n            />\n          </td>\n          {!this.isHasRoots && (\n            <td>\n              <Typography>\n                <peculiar-highlight-words search={searchHighlight}>\n                  {certificate.body.issuerCommonName}\n                </peculiar-highlight-words>\n              </Typography>\n            </td>\n          )}\n          <td>\n            <Typography>\n              <peculiar-highlight-words search={searchHighlight}>\n                {certificate.name || certificate.body.commonName}\n              </peculiar-highlight-words>\n            </Typography>\n          </td>\n          <td>\n            <Typography>\n              <peculiar-highlight-words search={searchHighlight}>\n                {publicKeyValue}\n              </peculiar-highlight-words>\n            </Typography>\n          </td>\n          <td>\n            <Typography>\n              <peculiar-highlight-words search={searchHighlight}>\n                {certificate.body.thumbprints['SHA-1']}\n              </peculiar-highlight-words>\n            </Typography>\n          </td>\n          <td>\n            {this.renderCertificateButtonActions(certificate)}\n          </td>\n        </tr>,\n        isExpandedRow && this.renderExpandedRow(certificate.body),\n      ]);\n    });\n\n    return content;\n  }\n\n  private renderCertificateDetailsModal() {\n    if (!this.certificateSelectedForDetails) {\n      return null;\n    }\n\n    return (\n      <div\n        class=\"modal_wrapper\"\n        role=\"presentation\"\n        aria-hidden=\"false\"\n        part=\"presentation\"\n      >\n        <div\n          class=\"modal_backdrop\"\n          onClick={this.handleModalClose}\n          aria-hidden=\"true\"\n        />\n        <div\n          class=\"modal_container\"\n          role=\"dialog\"\n          part=\"presentation_container\"\n        >\n          <header class=\"modal_header\">\n            <Typography\n              variant=\"h4\"\n            >\n              {l10n.getString('certificateDetails')}\n            </Typography>\n            <Button\n              onClick={this.handleModalClose}\n              startIcon={<CrossIcon />}\n            />\n          </header>\n          <div class=\"modal_content\">\n            <peculiar-certificate-viewer\n              certificate={this.certificateSelectedForDetails}\n              mobileMediaQueryString={this.mobileMediaQueryString}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private renderSearch() {\n    if (!this.filterWithSearch && !this.highlightWithSearch) {\n      return null;\n    }\n\n    return (\n      <div class=\"search_section\">\n        <input\n          onInput={this.handleSearch}\n          type=\"search\"\n          value=\"\"\n          class=\"input_search t-b3 c-black\"\n          disabled={!this.certificatesDecoded.length}\n          placeholder=\"Search\"\n        />\n      </div>\n    );\n  }\n\n  private renderEmptyState() {\n    const colSpan = this.getMaxColSpanValue();\n\n    return (\n      <tr>\n        <td\n          class=\"status_wrapper\"\n          colSpan={colSpan}\n        >\n          <Typography\n            variant=\"b1\"\n          >\n            There are no certificates available.\n          </Typography>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderEmptySearchState() {\n    const colSpan = this.getMaxColSpanValue();\n\n    return (\n      <tr>\n        <td\n          class=\"status_wrapper\"\n          colSpan={colSpan}\n        >\n          <Typography\n            variant=\"b1\"\n          >\n            No results found for &ldquo;\n            {this.search}\n            &ldquo;\n          </Typography>\n        </td>\n      </tr>\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private renderLoadingState() {\n    return (\n      <div class=\"loading_container\">\n        <peculiar-circular-progress />\n      </div>\n    );\n  }\n\n  private renderTableBody() {\n    if (this.isDecodeInProcess) {\n      return null;\n    }\n\n    if (!this.certificatesDecoded.length) {\n      return this.renderEmptyState();\n    }\n\n    const certificatesRows = this.renderCertificatesRows();\n\n    if (this.search && !certificatesRows.length) {\n      return this.renderEmptySearchState();\n    }\n\n    return certificatesRows;\n  }\n\n  render() {\n    return (\n      <Host\n        data-mobile-screen-view={String(this.mobileScreenView)}\n      >\n        {this.renderSearch()}\n        <table>\n          {!this.mobileScreenView && (\n            <thead>\n              <tr>\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <th />\n                {!this.isHasRoots && (\n                  <th class=\"col_issuer\">\n                    <Typography variant=\"s2\">\n                      {l10n.getString('issuer')}\n                    </Typography>\n                  </th>\n                )}\n                <th class=\"col_name\">\n                  <Typography variant=\"s2\">\n                    {l10n.getString('name')}\n                  </Typography>\n                </th>\n                <th class=\"col_public_key\">\n                  <Typography variant=\"s2\">\n                    {l10n.getString('publicKey')}\n                  </Typography>\n                </th>\n                <th class=\"col_fingerprint\">\n                  <Typography variant=\"s2\">\n                    {l10n.getString('fingerprint')}\n                    &nbsp; (SHA-1)\n                  </Typography>\n                </th>\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <th />\n              </tr>\n            </thead>\n          )}\n          <tbody>\n            {this.renderTableBody()}\n          </tbody>\n        </table>\n\n        {this.renderCertificateDetailsModal()}\n        {this.isDecodeInProcess && this.renderLoadingState()}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}