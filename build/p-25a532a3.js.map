{"version":3,"names":["readAsBinaryString","file","Promise","resolve","reject","reader","FileReader","onload","value","result","fileName","name","fileSize","size","sourceMime","type","onerror","error","readAsArrayBuffer","readAsDataUrl","readAsDataURL","readAsText","options"],"sources":["src/utils/read_file.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport type FileValue = string | ArrayBuffer | null;\nexport interface IFileDataType extends Blob {\n  name?: string;\n  mimeType?: string;\n  lastModified?: number;\n}\nexport interface IReadFileResult {\n  value: FileValue;\n  fileName: string | undefined;\n  fileSize: number | undefined;\n  sourceMime: string | undefined;\n}\n\n/**\n * Read file as Binary string\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsBinaryString(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsBinaryString(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsBinaryString(file);\n  });\n}\n\n/**\n * Read file as ArrayBuffer\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsArrayBuffer(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsArrayBuffer(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n/**\n * Read file as Data URL\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsDataUrl(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsDataUrl(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Read file as Text\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsText(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsText(file: IFileDataType, options?: string): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsText(file, options);\n  });\n}\n"],"mappings":";;;;;;;;;;SAiCgBA,EAAmBC,GACjC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,IAAMJ,EAAQ,CAC5BK,MAAOH,EAAOI,OACdC,SAAUT,EAAKU,KACfC,SAAUX,EAAKY,KACfC,WAAYb,EAAKc,OAGnBV,EAAOW,QAAU,IAAMZ,EAAOC,EAAOY,OAErCZ,EAAOL,mBAAmBC,EAAK,GAEnC,C,SAcgBiB,EAAkBjB,GAChC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,IAAMJ,EAAQ,CAC5BK,MAAOH,EAAOI,OACdC,SAAUT,EAAKU,KACfC,SAAUX,EAAKY,KACfC,WAAYb,EAAKc,OAGnBV,EAAOW,QAAU,IAAMZ,EAAOC,EAAOY,OAErCZ,EAAOa,kBAAkBjB,EAAK,GAElC,C,SAcgBkB,EAAclB,GAC5B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,IAAMJ,EAAQ,CAC5BK,MAAOH,EAAOI,OACdC,SAAUT,EAAKU,KACfC,SAAUX,EAAKY,KACfC,WAAYb,EAAKc,OAGnBV,EAAOW,QAAU,IAAMZ,EAAOC,EAAOY,OAErCZ,EAAOe,cAAcnB,EAAK,GAE9B,C,SAcgBoB,EAAWpB,EAAqBqB,GAC9C,OAAO,IAAIpB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,IAAMJ,EAAQ,CAC5BK,MAAOH,EAAOI,OACdC,SAAUT,EAAKU,KACfC,SAAUX,EAAKY,KACfC,WAAYb,EAAKc,OAGnBV,EAAOW,QAAU,IAAMZ,EAAOC,EAAOY,OAErCZ,EAAOgB,WAAWpB,EAAMqB,EAAQ,GAEpC,Q","ignoreList":[]}