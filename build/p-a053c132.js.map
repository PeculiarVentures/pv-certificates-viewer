{"version":3,"names":["downloadFromBuffer","value","name","extension","mime","blob","Blob","type","navigator","msSaveBlob","Promise","resolve","setTimeout","blobURL","window","URL","createObjectURL","link","document","createElement","frame","style","display","body","appendChild","href","target","download","dispatchEvent","MouseEvent","removeChild","Object","defineProperty","exports","ARRAY_BUFFER_NAME","BufferSourceConverter","isArrayBuffer","data","prototype","toString","call","toArrayBuffer","this","byteLength","buffer","toUint8Array","slice","toView","Uint8Array","constructor","isArrayBufferView","byteOffset","TypeError","isBufferSource","ArrayBuffer","isView","isEqual","a","b","aView","bView","length","i","concat","args","Array","isArray","buffers","size","res","offset","view","set","Utf8Converter","fromString","text","s","unescape","encodeURIComponent","uintArray","charCodeAt","buf","encodedString","String","fromCharCode","decodedString","decodeURIComponent","escape","Utf16Converter","littleEndian","arrayBuffer","dataView","DataView","code","getUint16","setUint16","Convert","isHex","test","isBase64","isBase64Url","ToString","enc","toLowerCase","ToUtf8String","ToBinary","ToHex","ToBase64","ToBase64Url","Error","FromString","str","FromUtf8String","FromBinary","FromHex","FromBase64","FromBase64Url","btoa","binary","Buffer","from","base64","formatted","formatString","atob","base64url","Base64Padding","replace","encoding","DEFAULT_UTF8_ENCODING","stringLength","resultView","splitter","len","char","padStart","push","join","hexString","c","parseInt","ToUtf16String","FromUtf16String","padCount","assign","sources","arguments","obj","prop","combine","totalByteLength","map","item","reduce","prev","cur","currentPos","forEach","arr","item2","bytes1","bytes2","b1","b2","Download","cert","asPEM","pem","asDER","hex","attrCert","csr","crl"],"sources":["src/utils/download_from_buffer.ts","../../node_modules/pvtsutils/build/index.js","src/utils/download.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Download from buffer\n *\n * @example\n * ```js\n *    import { downloadFromBuffer } from './utils';\n *\n *    downloadFromBuffer(arrayBufferValue, 'myFile', 'pdf', 'applciation/pdf');\n * ```\n */\n\nexport function downloadFromBuffer(\n  value: ArrayBuffer,\n  name: string,\n  extension: string,\n  mime: string = 'application/octet-stream',\n) {\n  const blob = new Blob([value], { type: mime });\n\n  // @ts-ignore\n  if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n    // @ts-ignore\n    navigator.msSaveBlob(blob, `${name}.${extension}`);\n\n    return new Promise((resolve) => {\n      setTimeout(resolve, 100);\n    });\n  }\n\n  const blobURL = window.URL.createObjectURL(blob);\n\n  const link = document.createElement('a');\n  const frame = document.createElement('iframe');\n\n  link.style.display = 'none';\n  frame.style.display = 'none';\n\n  frame.name = blobURL;\n  document.body.appendChild(frame);\n\n  link.href = blobURL;\n  link.target = blobURL;\n  link.download = `${name}.${extension}`;\n  document.body.appendChild(link);\n  link.dispatchEvent(new MouseEvent('click'));\n  document.body.removeChild(link);\n\n  return new Promise<void>((resolve) => {\n    setTimeout(\n      () => {\n        document.body.removeChild(frame);\n        resolve();\n      },\n      100,\n    );\n  });\n}\n","/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\r\nclass BufferSourceConverter {\r\n    static isArrayBuffer(data) {\r\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\r\n    }\r\n    static toArrayBuffer(data) {\r\n        if (this.isArrayBuffer(data)) {\r\n            return data;\r\n        }\r\n        if (data.byteLength === data.buffer.byteLength) {\r\n            return data.buffer;\r\n        }\r\n        return this.toUint8Array(data).slice().buffer;\r\n    }\r\n    static toUint8Array(data) {\r\n        return this.toView(data, Uint8Array);\r\n    }\r\n    static toView(data, type) {\r\n        if (data.constructor === type) {\r\n            return data;\r\n        }\r\n        if (this.isArrayBuffer(data)) {\r\n            return new type(data);\r\n        }\r\n        if (this.isArrayBufferView(data)) {\r\n            return new type(data.buffer, data.byteOffset, data.byteLength);\r\n        }\r\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n    }\r\n    static isBufferSource(data) {\r\n        return this.isArrayBufferView(data)\r\n            || this.isArrayBuffer(data);\r\n    }\r\n    static isArrayBufferView(data) {\r\n        return ArrayBuffer.isView(data)\r\n            || (data && this.isArrayBuffer(data.buffer));\r\n    }\r\n    static isEqual(a, b) {\r\n        const aView = BufferSourceConverter.toUint8Array(a);\r\n        const bView = BufferSourceConverter.toUint8Array(b);\r\n        if (aView.length !== bView.byteLength) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < aView.length; i++) {\r\n            if (aView[i] !== bView[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static concat(...args) {\r\n        if (Array.isArray(args[0])) {\r\n            const buffers = args[0];\r\n            let size = 0;\r\n            for (const buffer of buffers) {\r\n                size += buffer.byteLength;\r\n            }\r\n            const res = new Uint8Array(size);\r\n            let offset = 0;\r\n            for (const buffer of buffers) {\r\n                const view = this.toUint8Array(buffer);\r\n                res.set(view, offset);\r\n                offset += view.length;\r\n            }\r\n            if (args[1]) {\r\n                return this.toView(res, args[1]);\r\n            }\r\n            return res.buffer;\r\n        }\r\n        else {\r\n            return this.concat(args);\r\n        }\r\n    }\r\n}\n\nclass Utf8Converter {\r\n    static fromString(text) {\r\n        const s = unescape(encodeURIComponent(text));\r\n        const uintArray = new Uint8Array(s.length);\r\n        for (let i = 0; i < s.length; i++) {\r\n            uintArray[i] = s.charCodeAt(i);\r\n        }\r\n        return uintArray.buffer;\r\n    }\r\n    static toString(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let encodedString = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            encodedString += String.fromCharCode(buf[i]);\r\n        }\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n}\r\nclass Utf16Converter {\r\n    static toString(buffer, littleEndian = false) {\r\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\r\n        const dataView = new DataView(arrayBuffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\r\n            const code = dataView.getUint16(i, littleEndian);\r\n            res += String.fromCharCode(code);\r\n        }\r\n        return res;\r\n    }\r\n    static fromString(text, littleEndian = false) {\r\n        const res = new ArrayBuffer(text.length * 2);\r\n        const dataView = new DataView(res);\r\n        for (let i = 0; i < text.length; i++) {\r\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\r\n        }\r\n        return res;\r\n    }\r\n}\r\nclass Convert {\r\n    static isHex(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-z0-9]+$/i.test(data);\r\n    }\r\n    static isBase64(data) {\r\n        return typeof data === \"string\"\r\n            && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);\r\n    }\r\n    static isBase64Url(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-zA-Z0-9-_]+$/i.test(data);\r\n    }\r\n    static ToString(buffer, enc = \"utf8\") {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.ToUtf8String(buf);\r\n            case \"binary\":\r\n                return this.ToBinary(buf);\r\n            case \"hex\":\r\n                return this.ToHex(buf);\r\n            case \"base64\":\r\n                return this.ToBase64(buf);\r\n            case \"base64url\":\r\n                return this.ToBase64Url(buf);\r\n            case \"utf16le\":\r\n                return Utf16Converter.toString(buf, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buf);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static FromString(str, enc = \"utf8\") {\r\n        if (!str) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.FromUtf8String(str);\r\n            case \"binary\":\r\n                return this.FromBinary(str);\r\n            case \"hex\":\r\n                return this.FromHex(str);\r\n            case \"base64\":\r\n                return this.FromBase64(str);\r\n            case \"base64url\":\r\n                return this.FromBase64Url(str);\r\n            case \"utf16le\":\r\n                return Utf16Converter.fromString(str, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(str);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static ToBase64(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        if (typeof btoa !== \"undefined\") {\r\n            const binary = this.ToString(buf, \"binary\");\r\n            return btoa(binary);\r\n        }\r\n        else {\r\n            return Buffer.from(buf).toString(\"base64\");\r\n        }\r\n    }\r\n    static FromBase64(base64) {\r\n        const formatted = this.formatString(base64);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64(formatted)) {\r\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\r\n        }\r\n        if (typeof atob !== \"undefined\") {\r\n            return this.FromBinary(atob(formatted));\r\n        }\r\n        else {\r\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\r\n        }\r\n    }\r\n    static FromBase64Url(base64url) {\r\n        const formatted = this.formatString(base64url);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64Url(formatted)) {\r\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\r\n        }\r\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\r\n    }\r\n    static ToBase64Url(data) {\r\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\r\n    }\r\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.FromBinary(text);\r\n            case \"utf8\":\r\n                return Utf8Converter.fromString(text);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(text);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.fromString(text, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.ToBinary(buffer);\r\n            case \"utf8\":\r\n                return Utf8Converter.toString(buffer);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buffer);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.toString(buffer, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static FromBinary(text) {\r\n        const stringLength = text.length;\r\n        const resultView = new Uint8Array(stringLength);\r\n        for (let i = 0; i < stringLength; i++) {\r\n            resultView[i] = text.charCodeAt(i);\r\n        }\r\n        return resultView.buffer;\r\n    }\r\n    static ToBinary(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            res += String.fromCharCode(buf[i]);\r\n        }\r\n        return res;\r\n    }\r\n    static ToHex(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        const splitter = \"\";\r\n        const res = [];\r\n        const len = buf.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const char = buf[i].toString(16).padStart(2, \"0\");\r\n            res.push(char);\r\n        }\r\n        return res.join(splitter);\r\n    }\r\n    static FromHex(hexString) {\r\n        let formatted = this.formatString(hexString);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isHex(formatted)) {\r\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\r\n        }\r\n        if (formatted.length % 2) {\r\n            formatted = `0${formatted}`;\r\n        }\r\n        const res = new Uint8Array(formatted.length / 2);\r\n        for (let i = 0; i < formatted.length; i = i + 2) {\r\n            const c = formatted.slice(i, i + 2);\r\n            res[i / 2] = parseInt(c, 16);\r\n        }\r\n        return res.buffer;\r\n    }\r\n    static ToUtf16String(buffer, littleEndian = false) {\r\n        return Utf16Converter.toString(buffer, littleEndian);\r\n    }\r\n    static FromUtf16String(text, littleEndian = false) {\r\n        return Utf16Converter.fromString(text, littleEndian);\r\n    }\r\n    static Base64Padding(base64) {\r\n        const padCount = 4 - (base64.length % 4);\r\n        if (padCount < 4) {\r\n            for (let i = 0; i < padCount; i++) {\r\n                base64 += \"=\";\r\n            }\r\n        }\r\n        return base64;\r\n    }\r\n    static formatString(data) {\r\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\r\n    }\r\n}\r\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\r\n    const res = arguments[0];\r\n    for (let i = 1; i < arguments.length; i++) {\r\n        const obj = arguments[i];\r\n        for (const prop in obj) {\r\n            res[prop] = obj[prop];\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction combine(...buf) {\r\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\r\n    const res = new Uint8Array(totalByteLength);\r\n    let currentPos = 0;\r\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\r\n        for (const item2 of arr) {\r\n            res[currentPos++] = item2;\r\n        }\r\n    });\r\n    return res.buffer;\r\n}\r\nfunction isEqual(bytes1, bytes2) {\r\n    if (!(bytes1 && bytes2)) {\r\n        return false;\r\n    }\r\n    if (bytes1.byteLength !== bytes2.byteLength) {\r\n        return false;\r\n    }\r\n    const b1 = new Uint8Array(bytes1);\r\n    const b2 = new Uint8Array(bytes2);\r\n    for (let i = 0; i < bytes1.byteLength; i++) {\r\n        if (b1[i] !== b2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\n\nimport { downloadFromBuffer } from './download_from_buffer';\n\nexport class Download {\n  public static cert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n  };\n\n  public static attrCert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n  };\n\n  public static csr = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n  };\n\n  public static crl = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n  };\n}\n"],"mappings":"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"}