{"version":3,"names":["Attribute","AsnData","getAsnExtnValue","this","asn","values","constructor","raw","super","AsnAttribute","asnExtnValue","type","id_DomainNameBeneficiary","value","AsnParser","parse","DomainNameBeneficiary","id_DomainNameLegalRepresentative","DomainNameLegalRepresentative","id_DomainNameOwner","DomainNameOwner","id_DomainNameTechnicalOperator","DomainNameTechnicalOperator","id_TypeRelationship","TypeRelationship","id_ActivityDescription","ActivityDescription","id_WebGDPR","WebGDPR","id_InsuranceValue","InsuranceValue","id_ValuationRanking","ValuationRanking","id_pkcs9_at_challengePassword","ChallengePassword","id_pkcs9_at_unstructuredName","UnstructuredName","id_pkcs9_at_extensionRequest","extensionRequest","ExtensionRequest","map","e","Extension","AsnConvert","serialize","Convert","ToHex","X509AttributeCertificate","certificateRawToBuffer","AttributeCertificate","thumbprints","acinfo","serialNumber","version","notBefore","attrCertValidityPeriod","notBeforeTime","Error","notAfter","notAfterTime","validity","dateDiff","issuer","v1Form","_a","v2Form","issuerName","holder","signature","signatureValue","signatureAlgorithm","algorithm","parseExtensions","extensions","parseAttributes","attributes","getThumbprint","thumbprint","getCertificateThumbprint","error","console","exportAsBase64","ToBase64","exportAsHexFormatted","hexFormat","exportAsPemFormatted","base64Format","commonName","downloadAsPEM","name","Download","attrCert","asPEM","downloadAsDER","asDER","CSR","CertificationRequest","certificationRequestInfo","subject","Name","toJSON","publicKey","subjectPublicKey","subjectPKInfo","params","id_ecPublicKey","parameters","ECParameters","id_rsaEncryption","RSAPublicKey","spki","i","length","shortName","csr","CRL","CertificateList","tbsCertList","lastUpdate","thisUpdate","getTime","nextUpdate","revokedCertificates","revokedCertificate","revocationDate","userCertificate","crlEntryExtensions","crlExtensions","crl"],"sources":["src/crypto/attribute.ts","src/crypto/x509_attribute_certificate.ts","src/crypto/csr.ts","src/crypto/crl.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\nimport { AsnParser, AsnConvert } from '@peculiar/asn1-schema';\nimport { Attribute as AsnAttribute } from '@peculiar/asn1-x509';\nimport {\n  id_DomainNameBeneficiary,\n  DomainNameBeneficiary,\n\n  id_DomainNameLegalRepresentative,\n  DomainNameLegalRepresentative,\n\n  id_DomainNameOwner,\n  DomainNameOwner,\n\n  id_DomainNameTechnicalOperator,\n  DomainNameTechnicalOperator,\n\n  id_TypeRelationship,\n  TypeRelationship,\n\n  id_ActivityDescription,\n  ActivityDescription,\n\n  id_WebGDPR,\n  WebGDPR,\n\n  id_InsuranceValue,\n  InsuranceValue,\n\n  id_ValuationRanking,\n  ValuationRanking,\n} from '@peculiar/asn1-ntqwac';\nimport {\n  id_pkcs9_at_extensionRequest,\n  ExtensionRequest,\n\n  id_pkcs9_at_challengePassword,\n  ChallengePassword,\n\n  id_pkcs9_at_unstructuredName,\n  UnstructuredName,\n} from '@peculiar/asn1-pkcs9';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\n\nexport type TAttributeValue = DomainNameBeneficiary\n| DomainNameLegalRepresentative\n| DomainNameOwner\n| DomainNameTechnicalOperator\n| TypeRelationship\n| ActivityDescription\n| WebGDPR\n| InsuranceValue\n| ValuationRanking\n| Extension<TExtensionValue>[]\n| ChallengePassword\n| UnstructuredName\n| string;\n\nexport class Attribute<T extends TAttributeValue> extends AsnData<AsnAttribute> {\n  public readonly value: T;\n\n  private getAsnExtnValue() {\n    return this.asn.values[0];\n  }\n\n  constructor(raw: BufferSource) {\n    super(raw, AsnAttribute);\n\n    const asnExtnValue = this.getAsnExtnValue();\n\n    switch (this.asn.type) {\n      case id_DomainNameBeneficiary:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameBeneficiary) as T;\n        break;\n      case id_DomainNameLegalRepresentative:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameLegalRepresentative) as T;\n        break;\n      case id_DomainNameOwner:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameOwner) as T;\n        break;\n      case id_DomainNameTechnicalOperator:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameTechnicalOperator) as T;\n        break;\n      case id_TypeRelationship:\n        this.value = AsnParser.parse(asnExtnValue, TypeRelationship) as T;\n        break;\n      case id_ActivityDescription:\n        this.value = AsnParser.parse(asnExtnValue, ActivityDescription) as T;\n        break;\n      case id_WebGDPR:\n        this.value = AsnParser.parse(asnExtnValue, WebGDPR) as T;\n        break;\n      case id_InsuranceValue:\n        this.value = AsnParser.parse(asnExtnValue, InsuranceValue) as T;\n        break;\n      case id_ValuationRanking:\n        this.value = AsnParser.parse(asnExtnValue, ValuationRanking) as T;\n        break;\n      case id_pkcs9_at_challengePassword:\n        this.value = AsnParser.parse(asnExtnValue, ChallengePassword) as T;\n        break;\n      case id_pkcs9_at_unstructuredName:\n        this.value = AsnParser.parse(asnExtnValue, UnstructuredName) as T;\n        break;\n      case id_pkcs9_at_extensionRequest: {\n        const extensionRequest = AsnParser.parse(asnExtnValue, ExtensionRequest);\n\n        this.value = extensionRequest\n          .map((e) => new Extension(AsnConvert.serialize(e))) as T;\n        break;\n      }\n      default:\n        this.value = Convert.ToHex(asnExtnValue) as T;\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport type { GeneralName } from '@peculiar/asn1-x509';\nimport { AttributeCertificate, Holder } from '@peculiar/asn1-x509-attr';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Extension, TExtensionValue } from './extension';\nimport { Attribute, TAttributeValue } from './attribute';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport class X509AttributeCertificate extends AsnData<AttributeCertificate> {\n  public readonly serialNumber: string;\n\n  public readonly version: number;\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly issuer: GeneralName[];\n\n  public holder: Holder;\n\n  public type: string = 'X.509 Attribute Certificate';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), AttributeCertificate);\n\n    const { acinfo } = this.asn;\n\n    this.serialNumber = Convert.ToHex(acinfo.serialNumber);\n    this.version = acinfo.version;\n\n    const notBefore = acinfo.attrCertValidityPeriod.notBeforeTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = acinfo.attrCertValidityPeriod.notAfterTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n    this.issuer = acinfo.issuer.v1Form || acinfo.issuer.v2Form?.issuerName;\n    this.holder = acinfo.holder;\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public parseExtensions() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.extensions) {\n      this.extensions = acinfo.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public parseAttributes() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.attributes) {\n      this.attributes = acinfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN ATTRIBUTE CERTIFICATE-----\\n${base64Format(this.exportAsBase64())}\\n-----END ATTRIBUTE CERTIFICATE-----`;\n  }\n\n  public get commonName(): string {\n    return `attribute-certificate-${this.thumbprints['SHA-1']}`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.attrCert.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.attrCert.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { ECParameters, id_ecPublicKey } from '@peculiar/asn1-ecc';\nimport { id_rsaEncryption, RSAPublicKey } from '@peculiar/asn1-rsa';\nimport { CertificationRequest } from '@peculiar/asn1-csr';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport { Attribute, TAttributeValue } from './attribute';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\ninterface IPublicKey {\n  algorithm: string;\n  value: BufferSource;\n  params?: ECParameters | RSAPublicKey;\n}\n\nexport class CSR extends AsnData<CertificationRequest> {\n  public readonly subject: INameJSON[];\n\n  public readonly version: number;\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public type: string = 'PKCS#10 Certificate Request';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificationRequest);\n\n    const { certificationRequestInfo } = this.asn;\n\n    this.subject = new Name(certificationRequestInfo.subject).toJSON();\n    this.version = certificationRequestInfo.version;\n  }\n\n  public get publicKey(): IPublicKey {\n    const { subjectPublicKey, algorithm } = this.asn.certificationRequestInfo.subjectPKInfo;\n    let params;\n\n    if (algorithm.algorithm === id_ecPublicKey && algorithm.parameters) {\n      params = AsnConvert.parse(algorithm.parameters, ECParameters);\n    }\n\n    if (algorithm.algorithm === id_rsaEncryption) {\n      params = AsnConvert.parse(subjectPublicKey, RSAPublicKey);\n    }\n\n    const spki = AsnConvert.serialize(this.asn.certificationRequestInfo.subjectPKInfo);\n\n    return {\n      params,\n      value: spki,\n      algorithm: algorithm.algorithm,\n    };\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.subject) {\n      return '';\n    }\n\n    for (let i = 0; i < this.subject.length; i += 1) {\n      const name = this.subject[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public parseAttributes() {\n    const { certificationRequestInfo } = this.asn;\n\n    if (certificationRequestInfo.attributes) {\n      this.attributes = certificationRequestInfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN CERTIFICATE REQUEST-----\\n${base64Format(this.exportAsBase64())}\\n-----END CERTIFICATE REQUEST-----`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.csr.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.csr.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { CertificateList, Time } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport interface IRevokedCertificate {\n  userCertificate: ArrayBuffer;\n  revocationDate: Time;\n  crlEntryExtensions?: Extension<TExtensionValue>[];\n}\n\nexport class CRL extends AsnData<CertificateList> {\n  public readonly issuer: INameJSON[];\n\n  public readonly version: number;\n\n  public readonly lastUpdate: Date;\n\n  public readonly nextUpdate: Date;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public revokedCertificates: IRevokedCertificate[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public type: string = 'X.509 Certificate Revocation List';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificateList);\n\n    const { tbsCertList } = this.asn;\n\n    this.issuer = new Name(tbsCertList.issuer).toJSON();\n    this.version = tbsCertList.version + 1;\n    this.lastUpdate = tbsCertList.thisUpdate.getTime();\n    this.nextUpdate = tbsCertList.nextUpdate.getTime();\n\n    this.revokedCertificates = (tbsCertList.revokedCertificates || [])\n      .map((revokedCertificate) => ({\n        revocationDate: revokedCertificate.revocationDate,\n        userCertificate: revokedCertificate.userCertificate,\n        crlEntryExtensions: revokedCertificate.crlEntryExtensions\n          ?.map((e) => new Extension(AsnConvert.serialize(e))),\n      }));\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public parseExtensions() {\n    const { tbsCertList } = this.asn;\n\n    if (tbsCertList.crlExtensions) {\n      this.extensions = tbsCertList.crlExtensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN X509 CRL-----\\n${base64Format(this.exportAsBase64())}\\n-----END X509 CRL-----`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.crl.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.crl.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}