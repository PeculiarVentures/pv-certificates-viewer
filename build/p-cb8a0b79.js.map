{"version":3,"names":["X509AttributeCertificate","AsnData","constructor","raw","super","certificateRawToBuffer","AttributeCertificate","this","thumbprints","type","tag","PemConverter","AttributeCertificateTag","acinfo","asn","serialNumber","Convert","ToHex","version","notBefore","attrCertValidityPeriod","notBeforeTime","Error","notAfter","notAfterTime","validity","dateDiff","issuer","v1Form","_a","v2Form","issuerName","holder","signature","signatureValue","signatureAlgorithm","value","algorithm","parseExtensions","extensions","map","e","Extension","AsnConvert","serialize","parseAttributes","attributes","Attribute","getThumbprint","thumbprint","getCertificateThumbprint","error","console","commonName","toString","format","encode","ToBase64Url","ToBase64","downloadAsPEM","name","Download","attrCert","asPEM","downloadAsDER","asDER","X509Crl","CertificateList","CrlTag","tbsCertList","Name","toJSON","lastUpdate","thisUpdate","getTime","nextUpdate","revokedCertificates","revokedCertificate","revocationDate","userCertificate","crlEntryExtensions","i","length","shortName","crlExtensions","crl"],"sources":["src/crypto/x509_attribute_certificate.ts","src/crypto/x509_crl.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport type { GeneralName } from '@peculiar/asn1-x509';\nimport { AttributeCertificate, Holder } from '@peculiar/asn1-x509-attr';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Extension, TExtensionValue } from './extension';\nimport { Attribute, TAttributeValue } from './attribute';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport class X509AttributeCertificate extends AsnData<AttributeCertificate> {\n  public readonly serialNumber: string;\n\n  public readonly version: number;\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly issuer: GeneralName[];\n\n  public holder: Holder;\n\n  public readonly type = 'X.509 Attribute Certificate';\n\n  public readonly tag = PemConverter.AttributeCertificateTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), AttributeCertificate);\n\n    const { acinfo } = this.asn;\n\n    this.serialNumber = Convert.ToHex(acinfo.serialNumber);\n    this.version = acinfo.version;\n\n    const notBefore = acinfo.attrCertValidityPeriod.notBeforeTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = acinfo.attrCertValidityPeriod.notAfterTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n    this.issuer = acinfo.issuer.v1Form || acinfo.issuer.v2Form?.issuerName;\n    this.holder = acinfo.holder;\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public parseExtensions() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.extensions) {\n      this.extensions = acinfo.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public parseAttributes() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.attributes) {\n      this.attributes = acinfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get commonName(): string {\n    return `attribute-certificate-${this.thumbprints['SHA-1']}`;\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.attrCert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.attrCert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { CertificateList, Time } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport interface IRevokedCertificate {\n  userCertificate: ArrayBuffer;\n  revocationDate: Time;\n  crlEntryExtensions?: Extension<TExtensionValue>[];\n}\n\nexport class X509Crl extends AsnData<CertificateList> {\n  public readonly issuer: INameJSON[];\n\n  public readonly version: number;\n\n  public readonly lastUpdate: Date;\n\n  public readonly nextUpdate: Date;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public revokedCertificates: IRevokedCertificate[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'X.509 Certificate Revocation List';\n\n  public readonly tag = PemConverter.CrlTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificateList);\n\n    const { tbsCertList } = this.asn;\n\n    this.issuer = new Name(tbsCertList.issuer).toJSON();\n    this.version = tbsCertList.version + 1;\n    this.lastUpdate = tbsCertList.thisUpdate.getTime();\n    this.nextUpdate = tbsCertList.nextUpdate.getTime();\n\n    this.revokedCertificates = (tbsCertList.revokedCertificates || [])\n      .map((revokedCertificate) => ({\n        revocationDate: revokedCertificate.revocationDate,\n        userCertificate: revokedCertificate.userCertificate,\n        crlEntryExtensions: revokedCertificate.crlEntryExtensions\n          ?.map((e) => new Extension(AsnConvert.serialize(e))),\n      }));\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public parseExtensions() {\n    const { tbsCertList } = this.asn;\n\n    if (tbsCertList.crlExtensions) {\n      this.extensions = tbsCertList.crlExtensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.crl.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.crl.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}