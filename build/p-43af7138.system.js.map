{"version":3,"names":["__extends","X509AttributeCertificate","_super","raw","_this","call","this","certificateRawToBuffer","AttributeCertificate","thumbprints","type","tag","PemConverter","AttributeCertificateTag","acinfo","asn","serialNumber","Convert","ToHex","version","notBefore","attrCertValidityPeriod","notBeforeTime","Error","notAfter","notAfterTime","validity","dateDiff","issuer","v1Form","_a","v2Form","issuerName","holder","Object","defineProperty","prototype","_b","signatureValue","signatureAlgorithm","value","algorithm","parseExtensions","extensions","map","e","Extension","AsnConvert","serialize","parseAttributes","attributes","Attribute","getThumbprint","getCertificateThumbprint","thumbprint","sent","console","error","error_1","concat","toString","format","encode","ToBase64Url","ToBase64","downloadAsPEM","name","Download","attrCert","asPEM","commonName","downloadAsDER","asDER","AsnData","X509Crl","CertificateList","CrlTag","tbsCertList","Name","toJSON","lastUpdate","thisUpdate","getTime","nextUpdate","revokedCertificates","revokedCertificate","revocationDate","userCertificate","crlEntryExtensions","error_2","signature","i","length","shortName","crlExtensions","crl"],"sources":["src/crypto/x509_attribute_certificate.ts","src/crypto/x509_crl.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport type { GeneralName } from '@peculiar/asn1-x509';\nimport { AttributeCertificate, Holder } from '@peculiar/asn1-x509-attr';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Extension, TExtensionValue } from './extension';\nimport { Attribute, TAttributeValue } from './attribute';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport class X509AttributeCertificate extends AsnData<AttributeCertificate> {\n  public readonly serialNumber: string;\n\n  public readonly version: number;\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly issuer: GeneralName[];\n\n  public holder: Holder;\n\n  public readonly type = 'X.509 Attribute Certificate';\n\n  public readonly tag = PemConverter.AttributeCertificateTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), AttributeCertificate);\n\n    const { acinfo } = this.asn;\n\n    this.serialNumber = Convert.ToHex(acinfo.serialNumber);\n    this.version = acinfo.version;\n\n    const notBefore = acinfo.attrCertValidityPeriod.notBeforeTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = acinfo.attrCertValidityPeriod.notAfterTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n    this.issuer = acinfo.issuer.v1Form || acinfo.issuer.v2Form?.issuerName;\n    this.holder = acinfo.holder;\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public parseExtensions() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.extensions) {\n      this.extensions = acinfo.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public parseAttributes() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.attributes) {\n      this.attributes = acinfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get commonName(): string {\n    return `attribute-certificate-${this.thumbprints['SHA-1']}`;\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.attrCert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.attrCert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { CertificateList, Time } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport interface IRevokedCertificate {\n  userCertificate: ArrayBuffer;\n  revocationDate: Time;\n  crlEntryExtensions?: Extension<TExtensionValue>[];\n}\n\nexport class X509Crl extends AsnData<CertificateList> {\n  public readonly issuer: INameJSON[];\n\n  public readonly version: number;\n\n  public readonly lastUpdate: Date;\n\n  public readonly nextUpdate: Date;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public revokedCertificates: IRevokedCertificate[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'X.509 Certificate Revocation List';\n\n  public readonly tag = PemConverter.CrlTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificateList);\n\n    const { tbsCertList } = this.asn;\n\n    this.issuer = new Name(tbsCertList.issuer).toJSON();\n    this.version = tbsCertList.version + 1;\n    this.lastUpdate = tbsCertList.thisUpdate.getTime();\n    this.nextUpdate = tbsCertList.nextUpdate.getTime();\n\n    this.revokedCertificates = (tbsCertList.revokedCertificates || [])\n      .map((revokedCertificate) => ({\n        revocationDate: revokedCertificate.revocationDate,\n        userCertificate: revokedCertificate.userCertificate,\n        crlEntryExtensions: revokedCertificate.crlEntryExtensions\n          ?.map((e) => new Extension(AsnConvert.serialize(e))),\n      }));\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public parseExtensions() {\n    const { tbsCertList } = this.asn;\n\n    if (tbsCertList.crlExtensions) {\n      this.extensions = tbsCertList.crlExtensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.crl.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.crl.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}