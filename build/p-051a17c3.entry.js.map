{"version":3,"names":["certificateViewerCss","CertificateViewer","constructor","hostRef","this","mobileMediaQueryString","mobileScreenView","isDecodeInProcess","getAuthKeyIdParentLink","value","_a","authKeyIdParentLink","replace","getAuthKeyIdSiblingsLink","authKeyIdSiblingsLink","getSubjectKeyIdChildrenLink","subjectKeyIdChildrenLink","getSubjectKeyIdSiblingsLink","subjectKeyIdSiblingsLink","handleMediaQueryChange","event","matches","componentWillLoad","decodeCertificate","certificate","mobileMediaQuery","window","matchMedia","addEventListener","bind","disconnectedCallback","removeEventListener","X509Certificate","certificateDecoded","parseExtensions","getThumbprint","error","certificateDecodeError","console","watchCertificateAndDecode","newValue","oldValue","serialNumber","getIssuerDnLink","issuerDnLink","renderErrorState","h","class","Typography","renderEmptyState","render","Host","String","BasicInformation","Object","assign","SubjectName","name","subject","IssuerName","issuer","PublicKey","publicKey","Signature","signature","Thumbprints","thumbprints","Extensions","extensions","getLEILink","getDNSNameLink","getIPAddressLink","download","Miscellaneous"],"sources":["src/components/certificate-viewer/certificate-viewer.scss?tag=peculiar-certificate-viewer&encapsulation=shadow","src/components/certificate-viewer/certificate-viewer.tsx"],"sourcesContent":["@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n  position: relative;\n  min-width: 280px;\n  min-height: 300px;\n  word-wrap: break-word;\n  word-break: break-word;\n}\n\nth, td {\n  border: none;\n}\n\ntable {\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: collapse;\n\n  td {\n    padding: var(--pv-size-base-2) var(--pv-size-base-4);\n    vertical-align: top;\n\n    &:first-child {\n      width: 220px;\n    }\n\n    &:last-child {\n      width: calc(100% - 220px)\n    }\n\n    &.monospace {\n      max-width: 0;\n    }\n\n    &.divider {\n      padding: var(--pv-size-base-2) 0;\n\n      span {\n        height: 1px;\n        display: block;\n        background-color: var(--pv-color-gray-4);\n      }\n    }\n  }\n\n  .title td {\n    padding-top: var(--pv-size-base-6);\n    padding-bottom: var(--pv-size-base-2);\n  }\n\n  table {\n    border-left: 1px solid var(--pv-color-gray-5);\n  }\n}\n\n.status_wrapper {\n  min-height: inherit;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n:host([data-mobile-screen-view=\"true\"]) {\n  table, tr, td {\n    display: block;\n  }\n\n  table {\n    tr {\n      padding: var(--pv-size-base-2) 0;\n\n      &.title {\n        padding-top: var(--pv-size-base-6);\n\n        td {\n          padding: 0 var(--pv-size-base-4);\n        }\n      }\n    }\n\n    td {\n      padding: 0 var(--pv-size-base-4);\n      width: 100% !important;\n      max-width: 100% !important;\n\n      &.divider {\n        padding: 0;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  h,\n  Prop,\n  State,\n  Watch,\n  Host,\n  Build,\n} from '@stencil/core';\nimport { X509Certificate } from '../../crypto';\nimport {\n  getDNSNameLink, getIPAddressLink, getLEILink,\n} from '../../utils/third_party_links';\nimport {\n  BasicInformation,\n  SubjectName,\n  IssuerName,\n  PublicKey,\n  Signature,\n  Thumbprints,\n  Extensions,\n  Miscellaneous,\n} from '../certificate-details-parts';\nimport { Typography } from '../typography';\n\nexport type TCertificateProp = string | X509Certificate;\n\n@Component({\n  tag: 'peculiar-certificate-viewer',\n  styleUrl: 'certificate-viewer.scss',\n  shadow: true,\n})\nexport class CertificateViewer {\n  private certificateDecoded: X509Certificate;\n\n  private certificateDecodeError: Error;\n\n  private mobileMediaQuery: MediaQueryList;\n\n  /**\n   * The certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop({ reflect: true }) certificate: TCertificateProp;\n\n  /**\n   * If `true` - component will show split-button to download certificate as PEM or DER.\n   */\n  @Prop({ reflect: true }) download?: boolean;\n\n  /**\n   * Authority Key Identifier extension parent link.\n   * <br />\n   * **NOTE**: `{{authKeyId}}` will be replaced to value from the extension.\n   * @example\n   *  https://censys.io/certificates?q=parsed.extensions.subject_key_id:%20{{authKeyId}}\n   */\n  @Prop({ reflect: true }) authKeyIdParentLink?: string;\n\n  /**\n   * Authority Key Identifier extension siblings link.\n   * <br />\n   * **NOTE**: `{{authKeyId}}` will be replaced to value from the extension.\n   * @example\n   *  https://censys.io/certificates?q=parsed.extensions.authority_key_id:%20{{authKeyId}}\n   */\n  @Prop({ reflect: true }) authKeyIdSiblingsLink?: string;\n\n  /**\n   * Subject Key Identifier extension children link.\n   * <br />\n   * **NOTE**: `{{subjectKeyId}}` will be replaced to value from the extension.\n   * @example\n   *  https://censys.io/certificates?q=parsed.extensions.authority_key_id:%20{{subjectKeyId}}\n   */\n  @Prop({ reflect: true }) subjectKeyIdChildrenLink?: string;\n\n  /**\n   * Subject Key Identifier extension siblings link.\n   * <br />\n   * **NOTE**: `{{subjectKeyId}}` will be replaced to value from the extension.\n   * @example\n   *  https://some.com/{{subjectKeyId}}\n   */\n  @Prop({ reflect: true }) subjectKeyIdSiblingsLink?: string;\n\n  /**\n   * Issuer DN link.\n   * **NOTE**: HTML component attribute must be `issuer-dn-link`.\n   */\n  @Prop({ reflect: true }) issuerDnLink?: string;\n\n  /**\n   * Mobile media query string to control screen view change.\n   * <br />\n   * **NOTE**: Based on https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia.\n   * @example\n   *  (max-width: 900px)\n   */\n  @Prop({ reflect: false }) mobileMediaQueryString?: string = '(max-width: 900px)';\n\n  @State() mobileScreenView = false;\n\n  @State() isDecodeInProcess = true;\n\n  private handleMediaQueryChange(event: MediaQueryListEvent) {\n    this.mobileScreenView = event.matches;\n  }\n\n  componentWillLoad() {\n    this.decodeCertificate(this.certificate);\n\n    if (Build.isBrowser) {\n      this.mobileMediaQuery = window.matchMedia(this.mobileMediaQueryString);\n      this.mobileMediaQuery.addEventListener('change', this.handleMediaQueryChange.bind(this));\n      this.mobileScreenView = this.mobileMediaQuery.matches;\n    }\n  }\n\n  disconnectedCallback() {\n    this.mobileMediaQuery.removeEventListener('change', this.handleMediaQueryChange.bind(this));\n  }\n\n  private async decodeCertificate(certificate: TCertificateProp) {\n    this.isDecodeInProcess = true;\n\n    try {\n      if (certificate instanceof X509Certificate) {\n        this.certificateDecoded = certificate;\n      } else if (typeof certificate === 'string') {\n        this.certificateDecoded = new X509Certificate(certificate);\n      } else {\n        return;\n      }\n\n      this.certificateDecoded.parseExtensions();\n      await this.certificateDecoded.getThumbprint('SHA-1');\n      await this.certificateDecoded.getThumbprint('SHA-256');\n    } catch (error) {\n      this.certificateDecodeError = error;\n\n      console.error('Error certificate parse:', error);\n    }\n\n    this.isDecodeInProcess = false;\n  }\n\n  /**\n   * Rerun decodeCertificate if previuos value not equal current value\n   */\n  @Watch('certificate')\n  watchCertificateAndDecode(newValue: TCertificateProp, oldValue: TCertificateProp) {\n    if (typeof newValue === 'string' && typeof oldValue === 'string') {\n      if (newValue !== oldValue) {\n        this.decodeCertificate(newValue);\n      }\n\n      return;\n    }\n\n    if (newValue instanceof X509Certificate && oldValue instanceof X509Certificate) {\n      if (newValue.serialNumber !== oldValue.serialNumber) {\n        this.decodeCertificate(newValue);\n      }\n    }\n  }\n\n  private getAuthKeyIdParentLink = (value: string) => this.authKeyIdParentLink\n    ?.replace('{{authKeyId}}', value);\n\n  private getAuthKeyIdSiblingsLink = (value: string) => this.authKeyIdSiblingsLink\n    ?.replace('{{authKeyId}}', value);\n\n  private getSubjectKeyIdChildrenLink = (value: string) => this.subjectKeyIdChildrenLink\n    ?.replace('{{subjectKeyId}}', value);\n\n  private getSubjectKeyIdSiblingsLink = (value: string) => this.subjectKeyIdSiblingsLink\n    ?.replace('{{subjectKeyId}}', value);\n\n  private getIssuerDnLink() {\n    return this.issuerDnLink;\n  }\n\n  private renderErrorState() {\n    return (\n      <div class=\"status_wrapper\">\n        <Typography>\n          There was an error decoding this certificate.\n        </Typography>\n      </div>\n    );\n  }\n\n  private renderEmptyState() {\n    return (\n      <div class=\"status_wrapper\">\n        <Typography>\n          There is no certificate available.\n        </Typography>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.certificateDecodeError) {\n      return this.renderErrorState();\n    }\n\n    if (!this.certificateDecoded) {\n      return this.renderEmptyState();\n    }\n\n    return (\n      <Host\n        data-mobile-screen-view={String(this.mobileScreenView)}\n      >\n        <table>\n          <BasicInformation\n            {...this.certificateDecoded}\n          />\n\n          <SubjectName\n            name={this.certificateDecoded.subject}\n          />\n\n          <IssuerName\n            name={this.certificateDecoded.issuer}\n            issuerDnLink={this.getIssuerDnLink()}\n          />\n\n          <PublicKey\n            publicKey={this.certificateDecoded.publicKey}\n          />\n\n          <Signature\n            signature={this.certificateDecoded.signature}\n          />\n\n          <Thumbprints\n            thumbprints={this.certificateDecoded.thumbprints}\n          />\n\n          <Extensions\n            extensions={this.certificateDecoded.extensions}\n            getLEILink={getLEILink}\n            getDNSNameLink={getDNSNameLink}\n            getIPAddressLink={getIPAddressLink}\n            getAuthKeyIdParentLink={this.getAuthKeyIdParentLink}\n            getAuthKeyIdSiblingsLink={this.getAuthKeyIdSiblingsLink}\n            getSubjectKeyIdChildrenLink={this.getSubjectKeyIdChildrenLink}\n            getSubjectKeyIdSiblingsLink={this.getSubjectKeyIdSiblingsLink}\n          />\n\n          {this.download && (\n            <Miscellaneous\n              certificate={this.certificateDecoded}\n            />\n          )}\n        </table>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}