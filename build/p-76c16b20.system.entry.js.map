{"version":3,"names":["certificateDecoderCss","PeculiarCertificateDecoderStyle0","CertificateDecoder","exports","this","handleClickDecode","value","_this","inputPaste","matches","__spreadArray","matchAll","RegExp","validator.base64Re","result","map","match","trim","length","decode","handleClickClear","clearValue","handleChangeInputFile","event","__awaiter","element","target","files","readAsBinaryString","file","_b","sent","handleChangeExample","handleDropFile","stopPropagation","preventDefault","dataTransfer","class_1","prototype","componentDidLoad","certificatesToDecode","setTimeout","certificatesDecoded","clearCertificate","emit","setValue","values","body","toString","join","successParse","certificates","Promise","all","certificate","resolve","X509Certificate","catch","X509AttributeCertificate","Pkcs10CertificateRequest","X509Crl","error","console","log","alert","concat","then","filter","cert","name","commonName","renderCertificateBody","h","download","renderCertificates","_a","class","index","Fragment","type","id","checked","Typography","variant","component","htmlFor","color","render","Host","key","placeholder","ref","el","onDrop","accept","onChange","certificateExamples","example","title","Button","onClick"],"sources":["src/components/certificate-decoder/certificate-decoder.scss?tag=peculiar-certificate-decoder&encapsulation=scoped","src/components/certificate-decoder/certificate-decoder.tsx"],"sourcesContent":["@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n}\n\n.textarea {\n  min-height: 300px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid var(--pv-color-gray-5);;\n  padding: 14px;\n  font-family: monospace;\n  resize: vertical;\n}\n\n.controls {\n  margin-top: var(--pv-size-base-2);\n  display: flex;\n  flex-direction: column;\n  gap: var(--pv-size-base-2);\n  margin-bottom: var(--pv-size-base-12);\n}\n\n.control_row {\n  display: flex;\n  align-items: center;\n  gap: var(--pv-size-base);\n}\n\n.tab-control {\n  border-width: 0px 0px 3px;\n  padding: var(--pv-size-base-3);\n  cursor: pointer;\n  border-style: solid;\n  border-color: transparent;\n\n  &:hover {\n    background-color: var(--pv-color-secondary-tint-5);\n  }\n}\n\n.tabs-container {\n  display: flex;\n  flex-wrap: wrap;\n\n  input[type=\"radio\"] {\n    display: none;\n\n    &:checked + .tab-control {\n      border-color: var(--pv-color-secondary);\n    }\n\n    &:not(:checked) + .tab-control + .tab-content {\n      display: none;\n    }\n  }\n}\n\n.tab-content {\n  order: 99;\n  width: 100%;\n  display: block;\n  border-top: 1px solid var(--pv-color-gray-4);\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Host,\n  h,\n  State,\n  Prop,\n  Event,\n  EventEmitter,\n  Fragment,\n} from '@stencil/core';\n\nimport { readAsBinaryString, validator } from '../../utils';\nimport {\n  X509Certificate,\n  X509AttributeCertificate,\n  Pkcs10CertificateRequest,\n  X509Crl,\n} from '../../crypto';\nimport { Button } from '../button';\nimport { Typography } from '../typography';\n\ninterface ICertificateDecoded {\n  name: string;\n  body: X509Certificate\n  | X509AttributeCertificate\n  | Pkcs10CertificateRequest\n  | X509Crl;\n}\n\n@Component({\n  tag: 'peculiar-certificate-decoder',\n  styleUrl: 'certificate-decoder.scss',\n  scoped: true,\n})\nexport class CertificateDecoder {\n  private inputPaste?: HTMLTextAreaElement;\n\n  /**\n   * The example certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificateExamples?: {\n    title: string;\n    value: string;\n  }[];\n\n  /**\n   * The default certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificatesToDecode?: string[];\n\n  @State() certificatesDecoded: ICertificateDecoded[];\n\n  /**\n   * Emitted when the certificate has been successfully parsed.\n   */\n  @Event() successParse!: EventEmitter<string[]>;\n\n  /**\n   * Emitted when the certificate has been removed.\n   */\n  @Event() clearCertificate!: EventEmitter<void>;\n\n  componentDidLoad() {\n    if (this.certificatesToDecode) {\n      /**\n       * Prevent Stencil warning about re-render\n       */\n      setTimeout(() => this.decode(this.certificatesToDecode), 100);\n    }\n  }\n\n  private handleClickDecode = () => {\n    const { value } = this.inputPaste;\n\n    if (value) {\n      const matches = [...value.matchAll(new RegExp(validator.base64Re, 'g'))];\n      const result = matches.map((match) => match[0].trim());\n\n      if (result.length) {\n        this.decode(result);\n      } else {\n        this.decode([value]);\n      }\n    }\n  };\n\n  private handleClickClear = () => {\n    this.clearValue();\n  };\n\n  private handleChangeInputFile = async (event: any) => {\n    const element = event.target;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode([file.value]);\n      }\n\n      element.value = '';\n    }\n  };\n\n  private handleChangeExample = (event: any) => {\n    if (event.target.value) {\n      this.decode([event.target.value]);\n    } else {\n      this.clearValue();\n    }\n  };\n\n  private handleDropFile = async (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const element = event.dataTransfer;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode([file.value]);\n      }\n    }\n  };\n\n  clearValue() {\n    this.inputPaste.value = '';\n    this.certificatesDecoded = null;\n    this.clearCertificate.emit();\n  }\n\n  setValue(values: typeof this.certificatesDecoded) {\n    this.certificatesDecoded = values;\n    this.inputPaste.value = values.map((value) => value.body.toString('pem')).join('\\n');\n    this.successParse.emit(values.map((value) => value.body.toString('base64')));\n  }\n\n  decode(certificates: string[]) {\n    Promise.all(certificates.map((certificate) => (\n      new Promise<X509Certificate>((resolve) => {\n        resolve(new X509Certificate(certificate));\n      })\n        .catch(() => new X509AttributeCertificate(certificate))\n        .catch(() => new Pkcs10CertificateRequest(certificate))\n        .catch(() => new X509Crl(certificate))\n        .catch((error) => {\n          console.log(error);\n\n          alert(`Error decoding certificate:\\n\"${certificate}\"\\n\\nPlease try to use Certificate/AttributeCertificate/CertificateRequest/CRL.`);\n        })\n    )))\n      .then((result: ICertificateDecoded['body'][]) => {\n        this.setValue(\n          result\n            .filter((cert) => cert)\n            .map((cert) => ({\n              name: cert.commonName,\n              body: cert,\n            })),\n        );\n      });\n  }\n\n  static renderCertificateBody(body: ICertificateDecoded['body']) {\n    if (body instanceof X509Certificate) {\n      return (\n        <peculiar-certificate-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    if (body instanceof X509AttributeCertificate) {\n      return (\n        <peculiar-attribute-certificate-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    if (body instanceof Pkcs10CertificateRequest) {\n      return (\n        <peculiar-csr-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    if (body instanceof X509Crl) {\n      return (\n        <peculiar-crl-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    return null;\n  }\n\n  renderCertificates() {\n    if (!this.certificatesDecoded?.length) {\n      return null;\n    }\n\n    if (this.certificatesDecoded.length === 1) {\n      return CertificateDecoder.renderCertificateBody(this.certificatesDecoded[0].body);\n    }\n\n    return (\n      <div class=\"tabs-container\">\n        {this.certificatesDecoded.map((cert, index) => (\n          <Fragment>\n            <input\n              type=\"radio\"\n              id={`tab-${index}`}\n              name=\"cert-tabs\"\n              checked={index === 0}\n            />\n            <Typography\n              variant=\"s2\"\n              component=\"label\"\n              // @ts-ignore\n              htmlFor={`tab-${index}`}\n              class=\"tab-control\"\n              color=\"black\"\n            >\n              {cert.name}\n            </Typography>\n            <div class=\"tab-content\">\n              {CertificateDecoder.renderCertificateBody(cert.body)}\n            </div>\n          </Fragment>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Host>\n        <textarea\n          placeholder=\"Certificate DER or PEM\"\n          class=\"textarea t-b2 c-black\"\n          ref={(el) => { this.inputPaste = el; }}\n          onDrop={this.handleDropFile}\n        />\n        <div class=\"controls\">\n          <div class=\"control_row\">\n            <Typography\n              variant=\"b3\"\n              color=\"secondary-tint-2\"\n            >\n              Drag or load file:\n            </Typography>\n            <input\n              type=\"file\"\n              accept=\"application/pkix-cert,application/x-x509-ca-cert,application/x-x509-user-cert,application/pkcs10,application/pkix-crl,.csr,.req,.crl\"\n              onChange={this.handleChangeInputFile}\n              value=\"\"\n            />\n          </div>\n          {this.certificateExamples?.length && (\n            <div class=\"control_row\">\n              <Typography\n                variant=\"b3\"\n                color=\"secondary-tint-2\"\n              >\n                Load examples:\n              </Typography>\n              <select onChange={this.handleChangeExample}>\n                <option value=\"\">None</option>\n                {this.certificateExamples.map((example) => (\n                  <option value={example.value}>\n                    {example.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          <div class=\"control_row\">\n            <Button\n              onClick={this.handleClickDecode}\n            >\n              Decode\n            </Button>\n            <Button\n              onClick={this.handleClickClear}\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n        {this.renderCertificates()}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}