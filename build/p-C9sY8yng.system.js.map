{"version":3,"file":"p-C9sY8yng.system.js","sources":["src/crypto/x509_certificate.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { ECParameters, id_ecPublicKey } from '@peculiar/asn1-ecc';\nimport { id_rsaEncryption, RSAPublicKey } from '@peculiar/asn1-rsa';\nimport {\n  id_composite_key,\n  id_alg_composite,\n  CompositePublicKey,\n  CompositeSignatureValue,\n  CompositeParams,\n} from '@peculiar/asn1-x509-post-quantum';\nimport { Certificate, SubjectPublicKeyInfo } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\nimport { dateDiff, Download } from '../utils';\nimport { Name, INameJSON } from './name';\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\nexport interface ISignature {\n  algorithm: string;\n  value: BufferSource;\n  params?: {\n    algorithm: string;\n    value: BufferSource;\n  }[];\n}\n\nexport interface IPublicKey {\n  algorithm: string;\n  value: BufferSource;\n  params?: ECParameters | RSAPublicKey | IPublicKey[];\n}\n\nexport class X509Certificate extends AsnData<Certificate> {\n  public readonly serialNumber: string;\n\n  public readonly subject: INameJSON[];\n\n  public readonly issuer: INameJSON[];\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public readonly version: number;\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'X.509 Certificate';\n\n  public readonly tag = PemConverter.CertificateTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), Certificate);\n\n    const { tbsCertificate } = this.asn;\n\n    this.serialNumber = Convert.ToHex(tbsCertificate.serialNumber);\n    this.subject = new Name(tbsCertificate.subject).toJSON();\n    this.issuer = new Name(tbsCertificate.issuer).toJSON();\n    this.version = tbsCertificate.version + 1;\n\n    const notBefore = tbsCertificate.validity.notBefore.utcTime\n      || tbsCertificate.validity.notBefore.generalTime;\n\n    if (!notBefore) {\n      throw new Error('Cannot get \\'notBefore\\' value');\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = tbsCertificate.validity.notAfter.utcTime\n      || tbsCertificate.validity.notAfter.generalTime;\n\n    if (!notAfter) {\n      throw new Error('Cannot get \\'notAfter\\' value');\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n  }\n\n  public parseExtensions() {\n    const { tbsCertificate } = this.asn;\n\n    if (tbsCertificate.extensions) {\n      this.extensions = tbsCertificate.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  private getPublicKeyInfo(publicKeyInfo: SubjectPublicKeyInfo) {\n    const { subjectPublicKey, algorithm } = publicKeyInfo;\n    let params;\n\n    if (algorithm.algorithm === id_ecPublicKey && algorithm.parameters) {\n      params = AsnConvert.parse(algorithm.parameters, ECParameters);\n    }\n\n    if (algorithm.algorithm === id_rsaEncryption) {\n      params = AsnConvert.parse(subjectPublicKey, RSAPublicKey);\n    }\n\n    if (algorithm.algorithm === id_composite_key) {\n      params = AsnConvert.parse(subjectPublicKey, CompositePublicKey);\n\n      params = params.map((param) => this.getPublicKeyInfo(param));\n    }\n\n    const spki = AsnConvert.serialize(publicKeyInfo);\n\n    return {\n      params,\n      value: spki,\n      algorithm: algorithm.algorithm,\n    };\n  }\n\n  public get publicKey(): IPublicKey {\n    return this.getPublicKeyInfo(this.asn.tbsCertificate.subjectPublicKeyInfo);\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n    let params;\n\n    if (signatureAlgorithm.algorithm === id_alg_composite) {\n      const compositeSignatureValues = AsnConvert.parse(signatureValue, CompositeSignatureValue);\n      const compositeParams = AsnConvert.parse(signatureAlgorithm.parameters, CompositeParams);\n\n      params = compositeParams.map((param, index) => ({\n        ...param,\n        value: compositeSignatureValues[index],\n      }));\n    }\n\n    return {\n      params,\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public async getThumbprint(\n    algorithm = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get commonName(): string {\n    if (!this.subject) {\n      return '';\n    }\n\n    for (let i = 0; i < this.subject.length; i += 1) {\n      const name = this.subject[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public get issuerCommonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public get isRoot(): boolean {\n    return JSON.stringify(this.issuer) === JSON.stringify(this.subject);\n  }\n\n  public subjectToString() {\n    if (!this.subject) {\n      return '';\n    }\n\n    return this.subject\n      .map((name) => (\n        `${name.shortName}=${name.value}`\n      ))\n      .join(', ');\n  }\n\n  public issuerToString() {\n    if (!this.issuer) {\n      return '';\n    }\n\n    return this.issuer\n      .map((name) => (\n        `${name.shortName}=${name.value}`\n      ))\n      .join(', ');\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.cert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.cert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n"],"names":["Convert"],"mappings":"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"}