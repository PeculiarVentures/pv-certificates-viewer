{"version":3,"names":["X509Certificate","AsnData","constructor","raw","super","certificateRawToBuffer","Certificate","this","thumbprints","type","tag","PemConverter","CertificateTag","tbsCertificate","asn","serialNumber","Convert","ToHex","subject","Name","toJSON","issuer","version","notBefore","validity","utcTime","generalTime","Error","notAfter","dateDiff","parseExtensions","extensions","map","e","Extension","AsnConvert","serialize","getPublicKeyInfo","publicKeyInfo","subjectPublicKey","algorithm","params","id_ecPublicKey","parameters","parse","ECParameters","id_rsaEncryption","RSAPublicKey","id_composite_key","CompositePublicKey","param","spki","value","publicKey","subjectPublicKeyInfo","signature","signatureValue","signatureAlgorithm","id_alg_composite","compositeSignatureValues","CompositeSignatureValue","compositeParams","CompositeParams","index","Object","assign","getThumbprint","thumbprint","getCertificateThumbprint","error","console","commonName","i","length","name","shortName","issuerCommonName","isRoot","JSON","stringify","subjectToString","join","issuerToString","toString","format","encode","ToBase64Url","ToBase64","downloadAsPEM","Download","cert","asPEM","downloadAsDER","asDER"],"sources":["src/crypto/x509_certificate.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { ECParameters, id_ecPublicKey } from '@peculiar/asn1-ecc';\nimport { id_rsaEncryption, RSAPublicKey } from '@peculiar/asn1-rsa';\nimport {\n  id_composite_key,\n  id_alg_composite,\n  CompositePublicKey,\n  CompositeSignatureValue,\n  CompositeParams,\n} from '@peculiar/asn1-x509-post-quantum';\nimport { Certificate, SubjectPublicKeyInfo } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download, PemConverter } from '../utils';\n\nimport { Name, INameJSON } from './name';\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\nexport interface ISignature {\n  algorithm: string;\n  value: BufferSource;\n  params?: {\n    algorithm: string;\n    value: BufferSource;\n  }[];\n}\n\nexport interface IPublicKey {\n  algorithm: string;\n  value: BufferSource;\n  params?: ECParameters | RSAPublicKey | IPublicKey[];\n}\n\nexport class X509Certificate extends AsnData<Certificate> {\n  public readonly serialNumber: string;\n\n  public readonly subject: INameJSON[];\n\n  public readonly issuer: INameJSON[];\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public readonly version: number;\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'X.509 Certificate';\n\n  public readonly tag = PemConverter.CertificateTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), Certificate);\n\n    const { tbsCertificate } = this.asn;\n\n    this.serialNumber = Convert.ToHex(tbsCertificate.serialNumber);\n    this.subject = new Name(tbsCertificate.subject).toJSON();\n    this.issuer = new Name(tbsCertificate.issuer).toJSON();\n    this.version = tbsCertificate.version + 1;\n\n    const notBefore = tbsCertificate.validity.notBefore.utcTime\n      || tbsCertificate.validity.notBefore.generalTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = tbsCertificate.validity.notAfter.utcTime\n      || tbsCertificate.validity.notAfter.generalTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n  }\n\n  public parseExtensions() {\n    const { tbsCertificate } = this.asn;\n\n    if (tbsCertificate.extensions) {\n      this.extensions = tbsCertificate.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  private getPublicKeyInfo(publicKeyInfo: SubjectPublicKeyInfo) {\n    const { subjectPublicKey, algorithm } = publicKeyInfo;\n    let params;\n\n    if (algorithm.algorithm === id_ecPublicKey && algorithm.parameters) {\n      params = AsnConvert.parse(algorithm.parameters, ECParameters);\n    }\n\n    if (algorithm.algorithm === id_rsaEncryption) {\n      params = AsnConvert.parse(subjectPublicKey, RSAPublicKey);\n    }\n\n    if (algorithm.algorithm === id_composite_key) {\n      params = AsnConvert.parse(subjectPublicKey, CompositePublicKey);\n\n      params = params.map((param) => this.getPublicKeyInfo(param));\n    }\n\n    const spki = AsnConvert.serialize(publicKeyInfo);\n\n    return {\n      params,\n      value: spki,\n      algorithm: algorithm.algorithm,\n    };\n  }\n\n  public get publicKey(): IPublicKey {\n    return this.getPublicKeyInfo(this.asn.tbsCertificate.subjectPublicKeyInfo);\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n    let params;\n\n    if (signatureAlgorithm.algorithm === id_alg_composite) {\n      const compositeSignatureValues = AsnConvert.parse(signatureValue, CompositeSignatureValue);\n      const compositeParams = AsnConvert.parse(signatureAlgorithm.parameters, CompositeParams);\n\n      params = compositeParams.map((param, index) => ({\n        ...param,\n        value: compositeSignatureValues[index],\n      }));\n    }\n\n    return {\n      params,\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get commonName(): string {\n    if (!this.subject) {\n      return '';\n    }\n\n    for (let i = 0; i < this.subject.length; i += 1) {\n      const name = this.subject[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public get issuerCommonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN') {\n        return name.value;\n      }\n\n      if (name.shortName === 'E') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public get isRoot(): boolean {\n    return JSON.stringify(this.issuer) === JSON.stringify(this.subject);\n  }\n\n  public subjectToString() {\n    if (!this.subject) {\n      return '';\n    }\n\n    return this.subject\n      .map((name) => (\n        `${name.shortName}=${name.value}`\n      ))\n      .join(', ');\n  }\n\n  public issuerToString() {\n    if (!this.issuer) {\n      return '';\n    }\n\n    return this.issuer\n      .map((name) => (\n        `${name.shortName}=${name.value}`\n      ))\n      .join(', ');\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.cert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.cert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}