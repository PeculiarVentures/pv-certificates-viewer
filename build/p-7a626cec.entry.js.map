{"version":3,"names":["id_data","id_signedData","X509Certificates","Array","constructor","raw","super","rawItems","PemConverter","isPem","decode","map","value","Convert","ToBase64Url","split","length","Error","item","this","push","X509Certificate","commonName","from","o","join","signedData","SignedData","version","encapContentInfo","eContentType","eContent","EncapsulatedContent","single","OctetString","certificates","CertificateSet","CertificateChoices","certificate","AsnConvert","parse","Certificate","cms","ContentInfo","contentType","content","serialize","toString","format","downloadAsPEM","name","Download","cert","asPEM","downloadAsDER","asDER","certificateDecoderCss","PeculiarCertificateDecoderStyle0","CertificateDecoder","handleClickDecode","inputPaste","handleClickClear","clearValue","handleChangeInputFile","async","event","element","target","files","file","readAsBinaryString","handleChangeExample","handleDropFile","stopPropagation","preventDefault","dataTransfer","componentDidLoad","certificateToDecode","setTimeout","certificateDecoded","clearCertificate","emit","setValue","successParse","Promise","resolve","catch","X509AttributeCertificate","Pkcs10CertificateRequest","X509Crl","then","res","error","console","log","alert","renderCertificate","h","download","render","Host","key","placeholder","class","ref","el","onDrop","Typography","variant","color","type","accept","onChange","_a","certificateExamples","example","title","Button","onClick"],"sources":["../../node_modules/@peculiar/asn1-cms/build/es2015/object_identifiers.js","src/crypto/x509_certificates.ts","src/components/certificate-decoder/certificate-decoder.scss?tag=peculiar-certificate-decoder&encapsulation=shadow","src/components/certificate-decoder/certificate-decoder.tsx"],"sourcesContent":["export const id_ct_contentInfo = \"1.2.840.113549.1.9.16.1.6\";\nexport const id_data = \"1.2.840.113549.1.7.1\";\nexport const id_signedData = \"1.2.840.113549.1.7.2\";\nexport const id_envelopedData = \"1.2.840.113549.1.7.3\";\nexport const id_digestedData = \"1.2.840.113549.1.7.5\";\nexport const id_encryptedData = \"1.2.840.113549.1.7.6\";\nexport const id_authData = \"1.2.840.113549.1.9.16.1.2\";\n","import { Convert } from 'pvtsutils';\nimport {\n  SignedData,\n  id_data,\n  EncapsulatedContent,\n  CertificateSet,\n  CertificateChoices,\n  ContentInfo,\n  id_signedData,\n} from '@peculiar/asn1-cms';\nimport { Certificate } from '@peculiar/asn1-x509';\nimport { AsnConvert, OctetString } from '@peculiar/asn1-schema';\n\nimport { Download } from '../utils';\n\nimport { PemConverter } from './pem_converter';\nimport { X509Certificate } from './x509_certificate';\n\nexport class X509Certificates extends Array<X509Certificate> {\n  constructor(raw: string) {\n    super();\n\n    const rawItems = PemConverter.isPem(raw)\n      ? PemConverter.decode(raw).map((value) => Convert.ToBase64Url(value))\n      : raw.split(',');\n\n    if (rawItems.length < 2) {\n      throw new Error('Unable to parse string. The array of elements is less than 2');\n    }\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const item of rawItems) {\n      this.push(new X509Certificate(item));\n    }\n  }\n\n  public get commonName(): string {\n    return Array.from(this)\n      .map((o) => o.commonName)\n      .join('_');\n  }\n\n  public get raw(): ArrayBuffer {\n    const signedData = new SignedData();\n\n    signedData.version = 1;\n    signedData.encapContentInfo.eContentType = id_data;\n    signedData.encapContentInfo.eContent = new EncapsulatedContent({\n      single: new OctetString(),\n    });\n    signedData.certificates = new CertificateSet(\n      Array.from(this).map((o) => new CertificateChoices({\n        certificate: AsnConvert.parse(o.raw, Certificate),\n      })),\n    );\n\n    const cms = new ContentInfo({\n      contentType: id_signedData,\n      content: AsnConvert.serialize(signedData),\n    });\n\n    return AsnConvert.serialize(cms);\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return Array.from(this)\n          .map((o) => o.toString('pem'))\n          .join('\\n');\n      case 'base64url':\n        return Array.from(this)\n          .map((o) => o.toString('base64url'))\n          .join(',');\n      default:\n        return Array.from(this)\n          .map((o) => o.toString('base64'))\n          .join(',');\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.cert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.cert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n","@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n}\n\n.textarea {\n  min-height: 300px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid var(--pv-color-gray-5);;\n  padding: 14px;\n  font-family: monospace;\n  resize: vertical;\n}\n\n.controls {\n  margin-top: var(--pv-size-base-2);\n  display: flex;\n  flex-direction: column;\n  gap: var(--pv-size-base-2);\n  margin-bottom: var(--pv-size-base-12);\n}\n\n.control_row {\n  display: flex;\n  align-items: center;\n  gap: var(--pv-size-base);\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Host,\n  h,\n  State,\n  Prop,\n  Event,\n  EventEmitter,\n} from '@stencil/core';\n\nimport { readAsBinaryString } from '../../utils';\nimport {\n  X509Certificate,\n  X509AttributeCertificate,\n  Pkcs10CertificateRequest,\n  X509Crl,\n  X509Certificates,\n} from '../../crypto';\nimport { Button } from '../button';\nimport { Typography } from '../typography';\n\n@Component({\n  tag: 'peculiar-certificate-decoder',\n  styleUrl: 'certificate-decoder.scss',\n  shadow: true,\n})\nexport class CertificateDecoder {\n  private inputPaste?: HTMLTextAreaElement;\n\n  /**\n   * The example certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificateExamples?: {\n    title: string;\n    value: string;\n  }[];\n\n  /**\n   * The default certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificateToDecode?: string;\n\n  @State() certificateDecoded: X509Certificates\n  | X509Certificate\n  | X509AttributeCertificate\n  | Pkcs10CertificateRequest\n  | X509Crl;\n\n  /**\n   * Emitted when the certificate has been successfully parsed.\n   */\n  @Event() successParse!: EventEmitter<string>;\n\n  /**\n   * Emitted when the certificate has been removed.\n   */\n  @Event() clearCertificate!: EventEmitter<void>;\n\n  componentDidLoad() {\n    if (this.certificateToDecode) {\n      /**\n       * Prevent Stencil warning about re-render\n       */\n      setTimeout(() => this.decode(this.certificateToDecode), 100);\n    }\n  }\n\n  private handleClickDecode = () => {\n    const { value } = this.inputPaste;\n\n    if (value) {\n      this.decode(value);\n    }\n  };\n\n  private handleClickClear = () => {\n    this.clearValue();\n  };\n\n  private handleChangeInputFile = async (event: any) => {\n    const element = event.target;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode(file.value);\n      }\n\n      element.value = '';\n    }\n  };\n\n  private handleChangeExample = (event: any) => {\n    if (event.target.value) {\n      this.decode(event.target.value);\n    } else {\n      this.clearValue();\n    }\n  };\n\n  private handleDropFile = async (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const element = event.dataTransfer;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode(file.value);\n      }\n    }\n  };\n\n  clearValue() {\n    this.inputPaste.value = '';\n    this.certificateDecoded = null;\n    this.clearCertificate.emit();\n  }\n\n  setValue(value: typeof this.certificateDecoded) {\n    this.certificateDecoded = value;\n    this.inputPaste.value = value.toString('pem');\n    this.successParse.emit(value.toString('base64url'));\n  }\n\n  decode(value: string) {\n    new Promise<X509Certificates>((resolve) => {\n      resolve(new X509Certificates(value));\n    })\n      .catch(() => new X509Certificate(value))\n      .catch(() => new X509AttributeCertificate(value))\n      .catch(() => new Pkcs10CertificateRequest(value))\n      .catch(() => new X509Crl(value))\n      .then((res: typeof this.certificateDecoded) => this.setValue(res))\n      .catch((error) => {\n        console.log(error);\n\n        alert(`Error decoding certificate:\\n\"${value}\"\\n\\nPlease try to use Certificate/AttributeCertificate/CertificateRequest/CRL.`);\n      });\n  }\n\n  renderCertificate() {\n    if (this.certificateDecoded instanceof X509Certificates) {\n      return (\n        <peculiar-certificate-chain-viewer\n          certificates={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof X509Certificate) {\n      return (\n        <peculiar-certificate-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof X509AttributeCertificate) {\n      return (\n        <peculiar-attribute-certificate-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof Pkcs10CertificateRequest) {\n      return (\n        <peculiar-csr-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof X509Crl) {\n      return (\n        <peculiar-crl-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    return (\n      <Host>\n        <textarea\n          placeholder=\"Certificate DER or PEM\"\n          class=\"textarea t-b2 c-black\"\n          ref={(el) => { this.inputPaste = el; }}\n          onDrop={this.handleDropFile}\n        />\n        <div class=\"controls\">\n          <div class=\"control_row\">\n            <Typography\n              variant=\"b3\"\n              color=\"secondary-tint-2\"\n            >\n              Drag or load file:\n            </Typography>\n            <input\n              type=\"file\"\n              accept=\"application/pkix-cert,application/x-x509-ca-cert,application/x-x509-user-cert,application/pkcs10,application/pkix-crl,.csr,.req,.crl\"\n              onChange={this.handleChangeInputFile}\n              value=\"\"\n            />\n          </div>\n          {this.certificateExamples?.length && (\n            <div class=\"control_row\">\n              <Typography\n                variant=\"b3\"\n                color=\"secondary-tint-2\"\n              >\n                Load examples:\n              </Typography>\n              <select onChange={this.handleChangeExample}>\n                <option value=\"\">None</option>\n                {this.certificateExamples.map((example) => (\n                  <option value={example.value}>\n                    {example.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          <div class=\"control_row\">\n            <Button\n              onClick={this.handleClickDecode}\n            >\n              Decode\n            </Button>\n            <Button\n              onClick={this.handleClickClear}\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n        {this.renderCertificate()}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}