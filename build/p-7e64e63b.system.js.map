{"version":3,"names":["__extends","X509Certificate","_super","raw","_this","call","this","certificateRawToBuffer","Certificate","thumbprints","type","tag","PemConverter","CertificateTag","tbsCertificate","asn","serialNumber","Convert","ToHex","subject","Name","toJSON","issuer","version","notBefore","validity","utcTime","generalTime","Error","notAfter","dateDiff","prototype","parseExtensions","extensions","map","e","Extension","AsnConvert","serialize","getPublicKeyInfo","publicKeyInfo","subjectPublicKey","algorithm","params","id_ecPublicKey","parameters","parse","ECParameters","id_rsaEncryption","RSAPublicKey","id_composite_key","CompositePublicKey","param","spki","value","Object","defineProperty","subjectPublicKeyInfo","_a","signatureValue","signatureAlgorithm","id_alg_composite","compositeSignatureValues_1","CompositeSignatureValue","compositeParams","CompositeParams","index","assign","getThumbprint","getCertificateThumbprint","thumbprint","sent","console","error","error_1","i","length","name","shortName","JSON","stringify","subjectToString","concat","join","issuerToString","toString","format","encode","ToBase64Url","ToBase64","downloadAsPEM","Download","cert","asPEM","commonName","downloadAsDER","asDER","AsnData"],"sources":["src/crypto/x509_certificate.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { ECParameters, id_ecPublicKey } from '@peculiar/asn1-ecc';\nimport { id_rsaEncryption, RSAPublicKey } from '@peculiar/asn1-rsa';\nimport {\n  id_composite_key,\n  id_alg_composite,\n  CompositePublicKey,\n  CompositeSignatureValue,\n  CompositeParams,\n} from '@peculiar/asn1-x509-post-quantum';\nimport { Certificate, SubjectPublicKeyInfo } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download } from '../utils';\n\nimport { Name, INameJSON } from './name';\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\nexport interface ISignature {\n  algorithm: string;\n  value: BufferSource;\n  params?: {\n    algorithm: string;\n    value: BufferSource;\n  }[];\n}\n\nexport interface IPublicKey {\n  algorithm: string;\n  value: BufferSource;\n  params?: ECParameters | RSAPublicKey | IPublicKey[];\n}\n\nexport class X509Certificate extends AsnData<Certificate> {\n  public readonly serialNumber: string;\n\n  public readonly subject: INameJSON[];\n\n  public readonly issuer: INameJSON[];\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public readonly version: number;\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'X.509 Certificate';\n\n  public readonly tag = PemConverter.CertificateTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), Certificate);\n\n    const { tbsCertificate } = this.asn;\n\n    this.serialNumber = Convert.ToHex(tbsCertificate.serialNumber);\n    this.subject = new Name(tbsCertificate.subject).toJSON();\n    this.issuer = new Name(tbsCertificate.issuer).toJSON();\n    this.version = tbsCertificate.version + 1;\n\n    const notBefore = tbsCertificate.validity.notBefore.utcTime\n      || tbsCertificate.validity.notBefore.generalTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = tbsCertificate.validity.notAfter.utcTime\n      || tbsCertificate.validity.notAfter.generalTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n  }\n\n  public parseExtensions() {\n    const { tbsCertificate } = this.asn;\n\n    if (tbsCertificate.extensions) {\n      this.extensions = tbsCertificate.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  private getPublicKeyInfo(publicKeyInfo: SubjectPublicKeyInfo) {\n    const { subjectPublicKey, algorithm } = publicKeyInfo;\n    let params;\n\n    if (algorithm.algorithm === id_ecPublicKey && algorithm.parameters) {\n      params = AsnConvert.parse(algorithm.parameters, ECParameters);\n    }\n\n    if (algorithm.algorithm === id_rsaEncryption) {\n      params = AsnConvert.parse(subjectPublicKey, RSAPublicKey);\n    }\n\n    if (algorithm.algorithm === id_composite_key) {\n      params = AsnConvert.parse(subjectPublicKey, CompositePublicKey);\n\n      params = params.map((param) => this.getPublicKeyInfo(param));\n    }\n\n    const spki = AsnConvert.serialize(publicKeyInfo);\n\n    return {\n      params,\n      value: spki,\n      algorithm: algorithm.algorithm,\n    };\n  }\n\n  public get publicKey(): IPublicKey {\n    return this.getPublicKeyInfo(this.asn.tbsCertificate.subjectPublicKeyInfo);\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n    let params;\n\n    if (signatureAlgorithm.algorithm === id_alg_composite) {\n      const compositeSignatureValues = AsnConvert.parse(signatureValue, CompositeSignatureValue);\n      const compositeParams = AsnConvert.parse(signatureAlgorithm.parameters, CompositeParams);\n\n      params = compositeParams.map((param, index) => ({\n        ...param,\n        value: compositeSignatureValues[index],\n      }));\n    }\n\n    return {\n      params,\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get commonName(): string {\n    if (!this.subject) {\n      return '';\n    }\n\n    for (let i = 0; i < this.subject.length; i += 1) {\n      const name = this.subject[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public get issuerCommonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN') {\n        return name.value;\n      }\n\n      if (name.shortName === 'E') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public get isRoot(): boolean {\n    return JSON.stringify(this.issuer) === JSON.stringify(this.subject);\n  }\n\n  public subjectToString() {\n    if (!this.subject) {\n      return '';\n    }\n\n    return this.subject\n      .map((name) => (\n        `${name.shortName}=${name.value}`\n      ))\n      .join(', ');\n  }\n\n  public issuerToString() {\n    if (!this.issuer) {\n      return '';\n    }\n\n    return this.issuer\n      .map((name) => (\n        `${name.shortName}=${name.value}`\n      ))\n      .join(', ');\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.cert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.cert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}