{"version":3,"names":["attributesParsers","id_DomainNameBeneficiary","DomainNameBeneficiary","id_DomainNameLegalRepresentative","DomainNameLegalRepresentative","id_DomainNameOwner","DomainNameOwner","id_DomainNameTechnicalOperator","DomainNameTechnicalOperator","id_TypeRelationship","TypeRelationship","id_ActivityDescription","ActivityDescription","id_WebGDPR","WebGDPR","id_InsuranceValue","InsuranceValue","id_ValuationRanking","ValuationRanking","id_pkcs9_at_challengePassword","ChallengePassword","id_pkcs9_at_unstructuredName","UnstructuredName","id_pkcs9_at_extensionRequest","ExtensionRequest","Attribute","AsnData","getAsnExtnValue","this","asn","values","constructor","raw","super","AsnAttribute","asnExtnValue","target","type","value","AsnParser","parse","console","warn","Convert","ToHex","error","message","Pkcs10CertificateRequest","certificateRawToBuffer","CertificationRequest","thumbprints","tag","certificationRequestInfo","subject","Name","toJSON","version","publicKey","subjectPublicKey","algorithm","subjectPKInfo","params","id_ecPublicKey","parameters","AsnConvert","ECParameters","id_rsaEncryption","RSAPublicKey","spki","serialize","signature","signatureAlgorithm","commonName","i","length","name","shortName","getThumbprint","thumbprint","getCertificateThumbprint","parseAttributes","attributes","map","e","extensionRequestAttribute","find","attribute","extensions","Extension","toString","format","hexFormat","base64Format","ToBase64","downloadAsPEM","Download","csr","asPEM","downloadAsDER","asDER"],"sources":["src/crypto/attribute.ts","src/crypto/pkcs10_certificate_request.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\nimport { AsnParser } from '@peculiar/asn1-schema';\nimport { Attribute as AsnAttribute } from '@peculiar/asn1-x509';\nimport {\n  id_DomainNameBeneficiary,\n  DomainNameBeneficiary,\n\n  id_DomainNameLegalRepresentative,\n  DomainNameLegalRepresentative,\n\n  id_DomainNameOwner,\n  DomainNameOwner,\n\n  id_DomainNameTechnicalOperator,\n  DomainNameTechnicalOperator,\n\n  id_TypeRelationship,\n  TypeRelationship,\n\n  id_ActivityDescription,\n  ActivityDescription,\n\n  id_WebGDPR,\n  WebGDPR,\n\n  id_InsuranceValue,\n  InsuranceValue,\n\n  id_ValuationRanking,\n  ValuationRanking,\n} from '@peculiar/asn1-ntqwac';\nimport {\n  id_pkcs9_at_extensionRequest,\n  ExtensionRequest,\n\n  id_pkcs9_at_challengePassword,\n  ChallengePassword,\n\n  id_pkcs9_at_unstructuredName,\n  UnstructuredName,\n} from '@peculiar/asn1-pkcs9';\n\nimport { AsnData } from './asn_data';\n\nconst attributesParsers = {\n  [id_DomainNameBeneficiary]: DomainNameBeneficiary,\n  [id_DomainNameLegalRepresentative]: DomainNameLegalRepresentative,\n  [id_DomainNameOwner]: DomainNameOwner,\n  [id_DomainNameTechnicalOperator]: DomainNameTechnicalOperator,\n  [id_TypeRelationship]: TypeRelationship,\n  [id_ActivityDescription]: ActivityDescription,\n  [id_WebGDPR]: WebGDPR,\n  [id_InsuranceValue]: InsuranceValue,\n  [id_ValuationRanking]: ValuationRanking,\n  [id_pkcs9_at_challengePassword]: ChallengePassword,\n  [id_pkcs9_at_unstructuredName]: UnstructuredName,\n  [id_pkcs9_at_extensionRequest]: ExtensionRequest,\n};\n\ntype TAttributeKeys = keyof typeof attributesParsers;\nexport type TAttributeValue = InstanceType<typeof attributesParsers[TAttributeKeys]> | string;\n\nexport class Attribute<T extends TAttributeValue> extends AsnData<AsnAttribute> {\n  public readonly value: T;\n\n  private getAsnExtnValue() {\n    return this.asn.values[0];\n  }\n\n  constructor(raw: BufferSource) {\n    super(raw, AsnAttribute);\n\n    const asnExtnValue = this.getAsnExtnValue();\n\n    try {\n      const target = attributesParsers[this.asn.type];\n\n      if (target) {\n        this.value = AsnParser.parse<T>(asnExtnValue, target);\n      } else {\n        console.warn(`Didn't detect parser for \"${this.asn.type}\" attribute.`);\n\n        this.value = Convert.ToHex(asnExtnValue) as T;\n      }\n    } catch (error) {\n      console.error(`Error parse \"${this.asn.type}\" attribute:`, error.message);\n\n      this.value = Convert.ToHex(asnExtnValue) as T;\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { ECParameters, id_ecPublicKey } from '@peculiar/asn1-ecc';\nimport { id_rsaEncryption, RSAPublicKey } from '@peculiar/asn1-rsa';\nimport { CertificationRequest } from '@peculiar/asn1-csr';\nimport {\n  id_pkcs9_at_extensionRequest,\n  ExtensionRequest,\n} from '@peculiar/asn1-pkcs9';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport { Attribute, TAttributeValue } from './attribute';\nimport { Extension, TExtensionValue } from './extension';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\ninterface IPublicKey {\n  algorithm: string;\n  value: BufferSource;\n  params?: ECParameters | RSAPublicKey;\n}\n\nexport class Pkcs10CertificateRequest extends AsnData<CertificationRequest> {\n  public readonly subject: INameJSON[];\n\n  public readonly version: number;\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'PKCS#10 Certificate Request';\n\n  public readonly tag = 'CERTIFICATE REQUEST';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificationRequest);\n\n    const { certificationRequestInfo } = this.asn;\n\n    this.subject = new Name(certificationRequestInfo.subject).toJSON();\n    this.version = certificationRequestInfo.version;\n  }\n\n  public get publicKey(): IPublicKey {\n    const { subjectPublicKey, algorithm } = this.asn.certificationRequestInfo.subjectPKInfo;\n    let params;\n\n    if (algorithm.algorithm === id_ecPublicKey && algorithm.parameters) {\n      params = AsnConvert.parse(algorithm.parameters, ECParameters);\n    }\n\n    if (algorithm.algorithm === id_rsaEncryption) {\n      params = AsnConvert.parse(subjectPublicKey, RSAPublicKey);\n    }\n\n    const spki = AsnConvert.serialize(this.asn.certificationRequestInfo.subjectPKInfo);\n\n    return {\n      params,\n      value: spki,\n      algorithm: algorithm.algorithm,\n    };\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.subject) {\n      return '';\n    }\n\n    for (let i = 0; i < this.subject.length; i += 1) {\n      const name = this.subject[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public parseAttributes() {\n    const { certificationRequestInfo } = this.asn;\n\n    if (certificationRequestInfo.attributes) {\n      this.attributes = certificationRequestInfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n\n      const extensionRequestAttribute = this.attributes.find(\n        (attribute) => attribute.asn.type === id_pkcs9_at_extensionRequest,\n      ) as Attribute<ExtensionRequest>;\n\n      if (extensionRequestAttribute) {\n        this.extensions = extensionRequestAttribute.value\n          .map((e) => new Extension(AsnConvert.serialize(e)));\n      }\n    }\n  }\n\n  public toString(format: 'hex' | 'pem' | 'base64' = 'pem'): string {\n    switch (format) {\n      case 'hex':\n        return hexFormat(Convert.ToHex(this.raw));\n      case 'pem':\n        return `-----BEGIN ${this.tag}-----\\n${base64Format(this.toString('base64'))}\\n-----END ${this.tag}-----`;\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.csr.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.csr.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}