{"version":3,"names":["certificateDecoderCss","PeculiarCertificateDecoderStyle0","CertificateDecoder","this","handleClickDecode","value","inputPaste","matches","matchAll","RegExp","validator.base64Re","result","map","match","trim","length","decode","handleClickClear","clearValue","handleChangeInputFile","async","event","element","target","files","file","readAsBinaryString","handleChangeExample","handleDropFile","stopPropagation","preventDefault","dataTransfer","componentDidLoad","certificatesToDecode","setTimeout","certificatesDecoded","clearCertificate","emit","setValue","values","body","toString","join","successParse","certificates","Promise","all","certificate","resolve","X509Certificate","catch","X509AttributeCertificate","Pkcs10CertificateRequest","X509Crl","error","console","log","alert","then","filter","cert","name","commonName","renderCertificateBody","h","download","renderCertificates","_a","class","index","Fragment","type","id","checked","Typography","variant","component","htmlFor","color","render","Host","key","placeholder","ref","el","onDrop","accept","onChange","certificateExamples","example","title","Button","onClick"],"sources":["src/components/certificate-decoder/certificate-decoder.scss?tag=peculiar-certificate-decoder&encapsulation=scoped","src/components/certificate-decoder/certificate-decoder.tsx"],"sourcesContent":["@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n}\n\n.textarea {\n  min-height: 300px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid var(--pv-color-gray-5);;\n  padding: 14px;\n  font-family: monospace;\n  resize: vertical;\n}\n\n.controls {\n  margin-top: var(--pv-size-base-2);\n  display: flex;\n  flex-direction: column;\n  gap: var(--pv-size-base-2);\n  margin-bottom: var(--pv-size-base-12);\n}\n\n.control_row {\n  display: flex;\n  align-items: center;\n  gap: var(--pv-size-base);\n}\n\n.tab-control {\n  border-width: 0px 0px 3px;\n  padding: var(--pv-size-base-3);\n  cursor: pointer;\n  border-style: solid;\n  border-color: transparent;\n\n  &:hover {\n    background-color: var(--pv-color-secondary-tint-5);\n  }\n}\n\n.tabs-container {\n  display: flex;\n  flex-wrap: wrap;\n\n  input[type=\"radio\"] {\n    display: none;\n\n    &:checked + .tab-control {\n      border-color: var(--pv-color-secondary);\n    }\n\n    &:not(:checked) + .tab-control + .tab-content {\n      display: none;\n    }\n  }\n}\n\n.tab-content {\n  order: 99;\n  width: 100%;\n  display: block;\n  border-top: 1px solid var(--pv-color-gray-4);\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Host,\n  h,\n  State,\n  Prop,\n  Event,\n  EventEmitter,\n  Fragment,\n} from '@stencil/core';\n\nimport { readAsBinaryString, validator } from '../../utils';\nimport {\n  X509Certificate,\n  X509AttributeCertificate,\n  Pkcs10CertificateRequest,\n  X509Crl,\n} from '../../crypto';\nimport { Button } from '../button';\nimport { Typography } from '../typography';\n\ninterface ICertificateDecoded {\n  name: string;\n  body: X509Certificate\n  | X509AttributeCertificate\n  | Pkcs10CertificateRequest\n  | X509Crl;\n}\n\n@Component({\n  tag: 'peculiar-certificate-decoder',\n  styleUrl: 'certificate-decoder.scss',\n  scoped: true,\n})\nexport class CertificateDecoder {\n  private inputPaste?: HTMLTextAreaElement;\n\n  /**\n   * The example certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificateExamples?: {\n    title: string;\n    value: string;\n  }[];\n\n  /**\n   * The default certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificatesToDecode?: string[];\n\n  @State() certificatesDecoded: ICertificateDecoded[];\n\n  /**\n   * Emitted when the certificate has been successfully parsed.\n   */\n  @Event() successParse!: EventEmitter<string[]>;\n\n  /**\n   * Emitted when the certificate has been removed.\n   */\n  @Event() clearCertificate!: EventEmitter<void>;\n\n  componentDidLoad() {\n    if (this.certificatesToDecode) {\n      /**\n       * Prevent Stencil warning about re-render\n       */\n      setTimeout(() => this.decode(this.certificatesToDecode), 100);\n    }\n  }\n\n  private handleClickDecode = () => {\n    const { value } = this.inputPaste;\n\n    if (value) {\n      const matches = [...value.matchAll(new RegExp(validator.base64Re, 'g'))];\n      const result = matches.map((match) => match[0].trim());\n\n      if (result.length) {\n        this.decode(result);\n      } else {\n        this.decode([value]);\n      }\n    }\n  };\n\n  private handleClickClear = () => {\n    this.clearValue();\n  };\n\n  private handleChangeInputFile = async (event: any) => {\n    const element = event.target;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode([file.value]);\n      }\n\n      element.value = '';\n    }\n  };\n\n  private handleChangeExample = (event: any) => {\n    if (event.target.value) {\n      this.decode([event.target.value]);\n    } else {\n      this.clearValue();\n    }\n  };\n\n  private handleDropFile = async (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const element = event.dataTransfer;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode([file.value]);\n      }\n    }\n  };\n\n  clearValue() {\n    this.inputPaste.value = '';\n    this.certificatesDecoded = null;\n    this.clearCertificate.emit();\n  }\n\n  setValue(values: typeof this.certificatesDecoded) {\n    this.certificatesDecoded = values;\n    this.inputPaste.value = values.map((value) => value.body.toString('pem')).join('\\n');\n    this.successParse.emit(values.map((value) => value.body.toString('base64')));\n  }\n\n  decode(certificates: string[]) {\n    Promise.all(certificates.map((certificate) => (\n      new Promise<X509Certificate>((resolve) => {\n        resolve(new X509Certificate(certificate));\n      })\n        .catch(() => new X509AttributeCertificate(certificate))\n        .catch(() => new Pkcs10CertificateRequest(certificate))\n        .catch(() => new X509Crl(certificate))\n        .catch((error) => {\n          console.log(error);\n\n          alert(`Error decoding certificate:\\n\"${certificate}\"\\n\\nPlease try to use Certificate/AttributeCertificate/CertificateRequest/CRL.`);\n        })\n    )))\n      .then((result: ICertificateDecoded['body'][]) => {\n        this.setValue(\n          result\n            .filter((cert) => cert)\n            .map((cert) => ({\n              name: cert.commonName,\n              body: cert,\n            })),\n        );\n      });\n  }\n\n  static renderCertificateBody(body: ICertificateDecoded['body']) {\n    if (body instanceof X509Certificate) {\n      return (\n        <peculiar-certificate-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    if (body instanceof X509AttributeCertificate) {\n      return (\n        <peculiar-attribute-certificate-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    if (body instanceof Pkcs10CertificateRequest) {\n      return (\n        <peculiar-csr-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    if (body instanceof X509Crl) {\n      return (\n        <peculiar-crl-viewer\n          certificate={body}\n          download\n        />\n      );\n    }\n\n    return null;\n  }\n\n  renderCertificates() {\n    if (!this.certificatesDecoded?.length) {\n      return null;\n    }\n\n    if (this.certificatesDecoded.length === 1) {\n      return CertificateDecoder.renderCertificateBody(this.certificatesDecoded[0].body);\n    }\n\n    return (\n      <div class=\"tabs-container\">\n        {this.certificatesDecoded.map((cert, index) => (\n          <Fragment>\n            <input\n              type=\"radio\"\n              id={`tab-${index}`}\n              name=\"cert-tabs\"\n              checked={index === 0}\n            />\n            <Typography\n              variant=\"s2\"\n              component=\"label\"\n              // @ts-ignore\n              htmlFor={`tab-${index}`}\n              class=\"tab-control\"\n              color=\"black\"\n            >\n              {cert.name}\n            </Typography>\n            <div class=\"tab-content\">\n              {CertificateDecoder.renderCertificateBody(cert.body)}\n            </div>\n          </Fragment>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Host>\n        <textarea\n          placeholder=\"Certificate DER or PEM\"\n          class=\"textarea t-b2 c-black\"\n          ref={(el) => { this.inputPaste = el; }}\n          onDrop={this.handleDropFile}\n        />\n        <div class=\"controls\">\n          <div class=\"control_row\">\n            <Typography\n              variant=\"b3\"\n              color=\"secondary-tint-2\"\n            >\n              Drag or load file:\n            </Typography>\n            <input\n              type=\"file\"\n              accept=\"application/pkix-cert,application/x-x509-ca-cert,application/x-x509-user-cert,application/pkcs10,application/pkix-crl,.csr,.req,.crl\"\n              onChange={this.handleChangeInputFile}\n              value=\"\"\n            />\n          </div>\n          {this.certificateExamples?.length && (\n            <div class=\"control_row\">\n              <Typography\n                variant=\"b3\"\n                color=\"secondary-tint-2\"\n              >\n                Load examples:\n              </Typography>\n              <select onChange={this.handleChangeExample}>\n                <option value=\"\">None</option>\n                {this.certificateExamples.map((example) => (\n                  <option value={example.value}>\n                    {example.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          <div class=\"control_row\">\n            <Button\n              onClick={this.handleClickDecode}\n            >\n              Decode\n            </Button>\n            <Button\n              onClick={this.handleClickClear}\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n        {this.renderCertificates()}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}