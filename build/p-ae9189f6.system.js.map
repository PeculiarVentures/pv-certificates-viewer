{"version":3,"names":["downloadFromBuffer","value","name","extension","mime","blob","Blob","type","navigator","msSaveBlob","concat","Promise","resolve","setTimeout","blobURL","window","URL","createObjectURL","link","document","createElement","frame","style","display","body","appendChild","href","target","download","dispatchEvent","MouseEvent","removeChild","Object","defineProperty","exports","ARRAY_BUFFER_NAME","BufferSourceConverter","isArrayBuffer","data","prototype","toString","call","toArrayBuffer","this","byteLength","buffer","toUint8Array","slice","toView","Uint8Array","constructor","isArrayBufferView","byteOffset","TypeError","isBufferSource","ArrayBuffer","isView","isEqual","a","b","aView","bView","length","i","args","_i","arguments","Array","isArray","buffers","size","_a","buffers_1","res","offset","_b","buffers_2","view","set","Utf8Converter","fromString","text","s","unescape","encodeURIComponent","uintArray","charCodeAt","buf","encodedString","String","fromCharCode","decodedString","decodeURIComponent","escape","Utf16Converter","littleEndian","arrayBuffer","dataView","DataView","code","getUint16","setUint16","Convert","isHex","test","isBase64","isBase64Url","ToString","enc","toLowerCase","ToUtf8String","ToBinary","ToHex","ToBase64","ToBase64Url","Error","FromString","str","FromUtf8String","FromBinary","FromHex","FromBase64","FromBase64Url","btoa","binary","Buffer","from","base64","formatted","formatString","atob","base64url","Base64Padding","replace","encoding","DEFAULT_UTF8_ENCODING","stringLength","resultView","splitter","len","char","padStart","push","join","hexString","c","parseInt","ToUtf16String","FromUtf16String","padCount","assign","sources","obj","prop","combine","totalByteLength","map","item","reduce","prev","cur","currentPos","forEach","arr","arr_1","item2","bytes1","bytes2","b1","b2","Download","cert","asPEM","pem","asDER","hex","attrCert","csr","crl"],"sources":["src/utils/download_from_buffer.ts","../../node_modules/pvtsutils/build/index.js","src/utils/download.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Download from buffer\n *\n * @example\n * ```js\n *    import { downloadFromBuffer } from './utils';\n *\n *    downloadFromBuffer(arrayBufferValue, 'myFile', 'pdf', 'applciation/pdf');\n * ```\n */\n\nexport function downloadFromBuffer(\n  value: ArrayBuffer,\n  name: string,\n  extension: string,\n  mime: string = 'application/octet-stream',\n) {\n  const blob = new Blob([value], { type: mime });\n\n  // @ts-ignore\n  if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n    // @ts-ignore\n    navigator.msSaveBlob(blob, `${name}.${extension}`);\n\n    return new Promise((resolve) => {\n      setTimeout(resolve, 100);\n    });\n  }\n\n  const blobURL = window.URL.createObjectURL(blob);\n\n  const link = document.createElement('a');\n  const frame = document.createElement('iframe');\n\n  link.style.display = 'none';\n  frame.style.display = 'none';\n\n  frame.name = blobURL;\n  document.body.appendChild(frame);\n\n  link.href = blobURL;\n  link.target = blobURL;\n  link.download = `${name}.${extension}`;\n  document.body.appendChild(link);\n  link.dispatchEvent(new MouseEvent('click'));\n  document.body.removeChild(link);\n\n  return new Promise<void>((resolve) => {\n    setTimeout(\n      () => {\n        document.body.removeChild(frame);\n        resolve();\n      },\n      100,\n    );\n  });\n}\n","/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\r\nclass BufferSourceConverter {\r\n    static isArrayBuffer(data) {\r\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\r\n    }\r\n    static toArrayBuffer(data) {\r\n        if (this.isArrayBuffer(data)) {\r\n            return data;\r\n        }\r\n        if (data.byteLength === data.buffer.byteLength) {\r\n            return data.buffer;\r\n        }\r\n        return this.toUint8Array(data).slice().buffer;\r\n    }\r\n    static toUint8Array(data) {\r\n        return this.toView(data, Uint8Array);\r\n    }\r\n    static toView(data, type) {\r\n        if (data.constructor === type) {\r\n            return data;\r\n        }\r\n        if (this.isArrayBuffer(data)) {\r\n            return new type(data);\r\n        }\r\n        if (this.isArrayBufferView(data)) {\r\n            return new type(data.buffer, data.byteOffset, data.byteLength);\r\n        }\r\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n    }\r\n    static isBufferSource(data) {\r\n        return this.isArrayBufferView(data)\r\n            || this.isArrayBuffer(data);\r\n    }\r\n    static isArrayBufferView(data) {\r\n        return ArrayBuffer.isView(data)\r\n            || (data && this.isArrayBuffer(data.buffer));\r\n    }\r\n    static isEqual(a, b) {\r\n        const aView = BufferSourceConverter.toUint8Array(a);\r\n        const bView = BufferSourceConverter.toUint8Array(b);\r\n        if (aView.length !== bView.byteLength) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < aView.length; i++) {\r\n            if (aView[i] !== bView[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static concat(...args) {\r\n        if (Array.isArray(args[0])) {\r\n            const buffers = args[0];\r\n            let size = 0;\r\n            for (const buffer of buffers) {\r\n                size += buffer.byteLength;\r\n            }\r\n            const res = new Uint8Array(size);\r\n            let offset = 0;\r\n            for (const buffer of buffers) {\r\n                const view = this.toUint8Array(buffer);\r\n                res.set(view, offset);\r\n                offset += view.length;\r\n            }\r\n            if (args[1]) {\r\n                return this.toView(res, args[1]);\r\n            }\r\n            return res.buffer;\r\n        }\r\n        else {\r\n            return this.concat(args);\r\n        }\r\n    }\r\n}\n\nclass Utf8Converter {\r\n    static fromString(text) {\r\n        const s = unescape(encodeURIComponent(text));\r\n        const uintArray = new Uint8Array(s.length);\r\n        for (let i = 0; i < s.length; i++) {\r\n            uintArray[i] = s.charCodeAt(i);\r\n        }\r\n        return uintArray.buffer;\r\n    }\r\n    static toString(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let encodedString = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            encodedString += String.fromCharCode(buf[i]);\r\n        }\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n}\r\nclass Utf16Converter {\r\n    static toString(buffer, littleEndian = false) {\r\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\r\n        const dataView = new DataView(arrayBuffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\r\n            const code = dataView.getUint16(i, littleEndian);\r\n            res += String.fromCharCode(code);\r\n        }\r\n        return res;\r\n    }\r\n    static fromString(text, littleEndian = false) {\r\n        const res = new ArrayBuffer(text.length * 2);\r\n        const dataView = new DataView(res);\r\n        for (let i = 0; i < text.length; i++) {\r\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\r\n        }\r\n        return res;\r\n    }\r\n}\r\nclass Convert {\r\n    static isHex(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-z0-9]+$/i.test(data);\r\n    }\r\n    static isBase64(data) {\r\n        return typeof data === \"string\"\r\n            && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);\r\n    }\r\n    static isBase64Url(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-zA-Z0-9-_]+$/i.test(data);\r\n    }\r\n    static ToString(buffer, enc = \"utf8\") {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.ToUtf8String(buf);\r\n            case \"binary\":\r\n                return this.ToBinary(buf);\r\n            case \"hex\":\r\n                return this.ToHex(buf);\r\n            case \"base64\":\r\n                return this.ToBase64(buf);\r\n            case \"base64url\":\r\n                return this.ToBase64Url(buf);\r\n            case \"utf16le\":\r\n                return Utf16Converter.toString(buf, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buf);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static FromString(str, enc = \"utf8\") {\r\n        if (!str) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.FromUtf8String(str);\r\n            case \"binary\":\r\n                return this.FromBinary(str);\r\n            case \"hex\":\r\n                return this.FromHex(str);\r\n            case \"base64\":\r\n                return this.FromBase64(str);\r\n            case \"base64url\":\r\n                return this.FromBase64Url(str);\r\n            case \"utf16le\":\r\n                return Utf16Converter.fromString(str, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(str);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static ToBase64(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        if (typeof btoa !== \"undefined\") {\r\n            const binary = this.ToString(buf, \"binary\");\r\n            return btoa(binary);\r\n        }\r\n        else {\r\n            return Buffer.from(buf).toString(\"base64\");\r\n        }\r\n    }\r\n    static FromBase64(base64) {\r\n        const formatted = this.formatString(base64);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64(formatted)) {\r\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\r\n        }\r\n        if (typeof atob !== \"undefined\") {\r\n            return this.FromBinary(atob(formatted));\r\n        }\r\n        else {\r\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\r\n        }\r\n    }\r\n    static FromBase64Url(base64url) {\r\n        const formatted = this.formatString(base64url);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64Url(formatted)) {\r\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\r\n        }\r\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\r\n    }\r\n    static ToBase64Url(data) {\r\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\r\n    }\r\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.FromBinary(text);\r\n            case \"utf8\":\r\n                return Utf8Converter.fromString(text);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(text);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.fromString(text, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.ToBinary(buffer);\r\n            case \"utf8\":\r\n                return Utf8Converter.toString(buffer);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buffer);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.toString(buffer, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static FromBinary(text) {\r\n        const stringLength = text.length;\r\n        const resultView = new Uint8Array(stringLength);\r\n        for (let i = 0; i < stringLength; i++) {\r\n            resultView[i] = text.charCodeAt(i);\r\n        }\r\n        return resultView.buffer;\r\n    }\r\n    static ToBinary(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            res += String.fromCharCode(buf[i]);\r\n        }\r\n        return res;\r\n    }\r\n    static ToHex(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        const splitter = \"\";\r\n        const res = [];\r\n        const len = buf.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const char = buf[i].toString(16).padStart(2, \"0\");\r\n            res.push(char);\r\n        }\r\n        return res.join(splitter);\r\n    }\r\n    static FromHex(hexString) {\r\n        let formatted = this.formatString(hexString);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isHex(formatted)) {\r\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\r\n        }\r\n        if (formatted.length % 2) {\r\n            formatted = `0${formatted}`;\r\n        }\r\n        const res = new Uint8Array(formatted.length / 2);\r\n        for (let i = 0; i < formatted.length; i = i + 2) {\r\n            const c = formatted.slice(i, i + 2);\r\n            res[i / 2] = parseInt(c, 16);\r\n        }\r\n        return res.buffer;\r\n    }\r\n    static ToUtf16String(buffer, littleEndian = false) {\r\n        return Utf16Converter.toString(buffer, littleEndian);\r\n    }\r\n    static FromUtf16String(text, littleEndian = false) {\r\n        return Utf16Converter.fromString(text, littleEndian);\r\n    }\r\n    static Base64Padding(base64) {\r\n        const padCount = 4 - (base64.length % 4);\r\n        if (padCount < 4) {\r\n            for (let i = 0; i < padCount; i++) {\r\n                base64 += \"=\";\r\n            }\r\n        }\r\n        return base64;\r\n    }\r\n    static formatString(data) {\r\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\r\n    }\r\n}\r\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\r\n    const res = arguments[0];\r\n    for (let i = 1; i < arguments.length; i++) {\r\n        const obj = arguments[i];\r\n        for (const prop in obj) {\r\n            res[prop] = obj[prop];\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction combine(...buf) {\r\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\r\n    const res = new Uint8Array(totalByteLength);\r\n    let currentPos = 0;\r\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\r\n        for (const item2 of arr) {\r\n            res[currentPos++] = item2;\r\n        }\r\n    });\r\n    return res.buffer;\r\n}\r\nfunction isEqual(bytes1, bytes2) {\r\n    if (!(bytes1 && bytes2)) {\r\n        return false;\r\n    }\r\n    if (bytes1.byteLength !== bytes2.byteLength) {\r\n        return false;\r\n    }\r\n    const b1 = new Uint8Array(bytes1);\r\n    const b2 = new Uint8Array(bytes2);\r\n    for (let i = 0; i < bytes1.byteLength; i++) {\r\n        if (b1[i] !== b2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\n\nimport { downloadFromBuffer } from './download_from_buffer';\n\nexport class Download {\n  public static cert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n  };\n\n  public static attrCert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n  };\n\n  public static csr = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n  };\n\n  public static crl = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n  };\n}\n"],"mappings":"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"}