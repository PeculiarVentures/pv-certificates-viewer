{"version":3,"names":["id_data","id_signedData","__extends","X509Certificates","_super","raw","_this","call","this","rawItems","PemConverter","isPem","decode","map","value","Convert","ToBase64Url","split","length","Error","_i","rawItems_1","item","push","X509Certificate","Object","defineProperty","prototype","Array","from","o","commonName","join","signedData","SignedData","version","encapContentInfo","eContentType","eContent","EncapsulatedContent","single","OctetString","certificates","CertificateSet","CertificateChoices","certificate","AsnConvert","parse","Certificate","cms","ContentInfo","contentType","content","serialize","toString","format","downloadAsPEM","name","Download","cert","asPEM","downloadAsDER","asDER","certificateDecoderCss","PeculiarCertificateDecoderStyle0","CertificateDecoder","exports","handleClickDecode","inputPaste","handleClickClear","clearValue","handleChangeInputFile","event","__awaiter","element","target","files","readAsBinaryString","file","_b","sent","handleChangeExample","handleDropFile","stopPropagation","preventDefault","dataTransfer","class_1","componentDidLoad","certificateToDecode","setTimeout","certificateDecoded","clearCertificate","emit","setValue","successParse","Promise","resolve","catch","X509AttributeCertificate","Pkcs10CertificateRequest","X509Crl","then","res","error","console","log","alert","concat","renderCertificate","h","download","render","Host","key","placeholder","class","ref","el","onDrop","Typography","variant","color","type","accept","onChange","_a","certificateExamples","example","title","Button","onClick"],"sources":["../../node_modules/@peculiar/asn1-cms/build/es2015/object_identifiers.js","src/crypto/x509_certificates.ts","src/components/certificate-decoder/certificate-decoder.scss?tag=peculiar-certificate-decoder&encapsulation=shadow","src/components/certificate-decoder/certificate-decoder.tsx"],"sourcesContent":["export const id_ct_contentInfo = \"1.2.840.113549.1.9.16.1.6\";\nexport const id_data = \"1.2.840.113549.1.7.1\";\nexport const id_signedData = \"1.2.840.113549.1.7.2\";\nexport const id_envelopedData = \"1.2.840.113549.1.7.3\";\nexport const id_digestedData = \"1.2.840.113549.1.7.5\";\nexport const id_encryptedData = \"1.2.840.113549.1.7.6\";\nexport const id_authData = \"1.2.840.113549.1.9.16.1.2\";\n","import { Convert } from 'pvtsutils';\nimport {\n  SignedData,\n  id_data,\n  EncapsulatedContent,\n  CertificateSet,\n  CertificateChoices,\n  ContentInfo,\n  id_signedData,\n} from '@peculiar/asn1-cms';\nimport { Certificate } from '@peculiar/asn1-x509';\nimport { AsnConvert, OctetString } from '@peculiar/asn1-schema';\n\nimport { Download } from '../utils';\n\nimport { PemConverter } from './pem_converter';\nimport { X509Certificate } from './x509_certificate';\n\nexport class X509Certificates extends Array<X509Certificate> {\n  constructor(raw: string) {\n    super();\n\n    const rawItems = PemConverter.isPem(raw)\n      ? PemConverter.decode(raw).map((value) => Convert.ToBase64Url(value))\n      : raw.split(',');\n\n    if (rawItems.length < 2) {\n      throw new Error('Unable to parse string. The array of elements is less than 2');\n    }\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const item of rawItems) {\n      this.push(new X509Certificate(item));\n    }\n  }\n\n  public get commonName(): string {\n    return Array.from(this)\n      .map((o) => o.commonName)\n      .join('_');\n  }\n\n  public get raw(): ArrayBuffer {\n    const signedData = new SignedData();\n\n    signedData.version = 1;\n    signedData.encapContentInfo.eContentType = id_data;\n    signedData.encapContentInfo.eContent = new EncapsulatedContent({\n      single: new OctetString(),\n    });\n    signedData.certificates = new CertificateSet(\n      Array.from(this).map((o) => new CertificateChoices({\n        certificate: AsnConvert.parse(o.raw, Certificate),\n      })),\n    );\n\n    const cms = new ContentInfo({\n      contentType: id_signedData,\n      content: AsnConvert.serialize(signedData),\n    });\n\n    return AsnConvert.serialize(cms);\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return Array.from(this)\n          .map((o) => o.toString('pem'))\n          .join('\\n');\n      case 'base64url':\n        return Array.from(this)\n          .map((o) => o.toString('base64url'))\n          .join(',');\n      default:\n        return Array.from(this)\n          .map((o) => o.toString('base64'))\n          .join(',');\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.cert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.cert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n","@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n}\n\n.textarea {\n  min-height: 300px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid var(--pv-color-gray-5);;\n  padding: 14px;\n  font-family: monospace;\n  resize: vertical;\n}\n\n.controls {\n  margin-top: var(--pv-size-base-2);\n  display: flex;\n  flex-direction: column;\n  gap: var(--pv-size-base-2);\n  margin-bottom: var(--pv-size-base-12);\n}\n\n.control_row {\n  display: flex;\n  align-items: center;\n  gap: var(--pv-size-base);\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Host,\n  h,\n  State,\n  Prop,\n  Event,\n  EventEmitter,\n} from '@stencil/core';\n\nimport { readAsBinaryString } from '../../utils';\nimport {\n  X509Certificate,\n  X509AttributeCertificate,\n  Pkcs10CertificateRequest,\n  X509Crl,\n  X509Certificates,\n} from '../../crypto';\nimport { Button } from '../button';\nimport { Typography } from '../typography';\n\n@Component({\n  tag: 'peculiar-certificate-decoder',\n  styleUrl: 'certificate-decoder.scss',\n  shadow: true,\n})\nexport class CertificateDecoder {\n  private inputPaste?: HTMLTextAreaElement;\n\n  /**\n   * The example certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificateExamples?: {\n    title: string;\n    value: string;\n  }[];\n\n  /**\n   * The default certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificateToDecode?: string;\n\n  @State() certificateDecoded: X509Certificates\n  | X509Certificate\n  | X509AttributeCertificate\n  | Pkcs10CertificateRequest\n  | X509Crl;\n\n  /**\n   * Emitted when the certificate has been successfully parsed.\n   */\n  @Event() successParse!: EventEmitter<string>;\n\n  /**\n   * Emitted when the certificate has been removed.\n   */\n  @Event() clearCertificate!: EventEmitter<void>;\n\n  componentDidLoad() {\n    if (this.certificateToDecode) {\n      /**\n       * Prevent Stencil warning about re-render\n       */\n      setTimeout(() => this.decode(this.certificateToDecode), 100);\n    }\n  }\n\n  private handleClickDecode = () => {\n    const { value } = this.inputPaste;\n\n    if (value) {\n      this.decode(value);\n    }\n  };\n\n  private handleClickClear = () => {\n    this.clearValue();\n  };\n\n  private handleChangeInputFile = async (event: any) => {\n    const element = event.target;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode(file.value);\n      }\n\n      element.value = '';\n    }\n  };\n\n  private handleChangeExample = (event: any) => {\n    if (event.target.value) {\n      this.decode(event.target.value);\n    } else {\n      this.clearValue();\n    }\n  };\n\n  private handleDropFile = async (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const element = event.dataTransfer;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode(file.value);\n      }\n    }\n  };\n\n  clearValue() {\n    this.inputPaste.value = '';\n    this.certificateDecoded = null;\n    this.clearCertificate.emit();\n  }\n\n  setValue(value: typeof this.certificateDecoded) {\n    this.certificateDecoded = value;\n    this.inputPaste.value = value.toString('pem');\n    this.successParse.emit(value.toString('base64url'));\n  }\n\n  decode(value: string) {\n    new Promise<X509Certificates>((resolve) => {\n      resolve(new X509Certificates(value));\n    })\n      .catch(() => new X509Certificate(value))\n      .catch(() => new X509AttributeCertificate(value))\n      .catch(() => new Pkcs10CertificateRequest(value))\n      .catch(() => new X509Crl(value))\n      .then((res: typeof this.certificateDecoded) => this.setValue(res))\n      .catch((error) => {\n        console.log(error);\n\n        alert(`Error decoding certificate:\\n\"${value}\"\\n\\nPlease try to use Certificate/AttributeCertificate/CertificateRequest/CRL.`);\n      });\n  }\n\n  renderCertificate() {\n    if (this.certificateDecoded instanceof X509Certificates) {\n      return (\n        <peculiar-certificate-chain-viewer\n          certificates={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof X509Certificate) {\n      return (\n        <peculiar-certificate-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof X509AttributeCertificate) {\n      return (\n        <peculiar-attribute-certificate-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof Pkcs10CertificateRequest) {\n      return (\n        <peculiar-csr-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    if (this.certificateDecoded instanceof X509Crl) {\n      return (\n        <peculiar-crl-viewer\n          certificate={this.certificateDecoded}\n          download\n        />\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    return (\n      <Host>\n        <textarea\n          placeholder=\"Certificate DER or PEM\"\n          class=\"textarea t-b2 c-black\"\n          ref={(el) => { this.inputPaste = el; }}\n          onDrop={this.handleDropFile}\n        />\n        <div class=\"controls\">\n          <div class=\"control_row\">\n            <Typography\n              variant=\"b3\"\n              color=\"secondary-tint-2\"\n            >\n              Drag or load file:\n            </Typography>\n            <input\n              type=\"file\"\n              accept=\"application/pkix-cert,application/x-x509-ca-cert,application/x-x509-user-cert,application/pkcs10,application/pkix-crl,.csr,.req,.crl\"\n              onChange={this.handleChangeInputFile}\n              value=\"\"\n            />\n          </div>\n          {this.certificateExamples?.length && (\n            <div class=\"control_row\">\n              <Typography\n                variant=\"b3\"\n                color=\"secondary-tint-2\"\n              >\n                Load examples:\n              </Typography>\n              <select onChange={this.handleChangeExample}>\n                <option value=\"\">None</option>\n                {this.certificateExamples.map((example) => (\n                  <option value={example.value}>\n                    {example.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          <div class=\"control_row\">\n            <Button\n              onClick={this.handleClickDecode}\n            >\n              Decode\n            </Button>\n            <Button\n              onClick={this.handleClickClear}\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n        {this.renderCertificate()}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}