{"version":3,"names":["downloadFromBuffer","value","name","extension","mime","blob","Blob","type","navigator","msSaveBlob","concat","Promise","resolve","setTimeout","blobURL","window","URL","createObjectURL","link","document","createElement","frame","style","display","body","appendChild","href","target","download","dispatchEvent","MouseEvent","removeChild","ARRAY_BUFFER_NAME","BufferSourceConverter","isArrayBuffer","data","Object","prototype","toString","call","toArrayBuffer","this","byteLength","buffer","byteOffset","toUint8Array","slice","toView","Uint8Array","constructor","isArrayBufferView","TypeError","isBufferSource","ArrayBuffer","isView","isEqual","a","b","aView","bView","length","i","args","_i","arguments","buffers","Array","isArray","Function","size","_a","buffers_1","res","offset","_b","buffers_2","view","set","STRING_TYPE","HEX_REGEX","BASE64_REGEX","BASE64URL_REGEX","Utf8Converter","fromString","text","s","unescape","encodeURIComponent","uintArray","charCodeAt","buf","encodedString","String","fromCharCode","decodedString","decodeURIComponent","escape","Utf16Converter","littleEndian","arrayBuffer","dataView","DataView","code","getUint16","setUint16","Convert","isHex","test","isBase64","isBase64Url","ToString","enc","toLowerCase","ToUtf8String","ToBinary","ToHex","ToBase64","ToBase64Url","Error","FromString","str","FromUtf8String","FromBinary","FromHex","FromBase64","FromBase64Url","btoa","binary","Buffer","from","base64","formatted","formatString","atob","base64url","Base64Padding","replace","encoding","DEFAULT_UTF8_ENCODING","stringLength","resultView","result","len","byte","hexString","c","parseInt","ToUtf16String","FromUtf16String","padCount","bytes1","bytes2","b1","b2","exports","Download","cert","asPEM","pem","asDER","hex","attrCert","csr","crl"],"sources":["src/utils/download_from_buffer.ts","../../node_modules/pvtsutils/build/index.js","src/utils/download.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Download from buffer\n *\n * @example\n * ```js\n *    import { downloadFromBuffer } from './utils';\n *\n *    downloadFromBuffer(arrayBufferValue, 'myFile', 'pdf', 'applciation/pdf');\n * ```\n */\n\nexport function downloadFromBuffer(\n  value: ArrayBuffer,\n  name: string,\n  extension: string,\n  mime: string = 'application/octet-stream',\n) {\n  const blob = new Blob([value], { type: mime });\n\n  // @ts-ignore\n  if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n    // @ts-ignore\n    navigator.msSaveBlob(blob, `${name}.${extension}`);\n\n    return new Promise((resolve) => {\n      setTimeout(resolve, 100);\n    });\n  }\n\n  const blobURL = window.URL.createObjectURL(blob);\n\n  const link = document.createElement('a');\n  const frame = document.createElement('iframe');\n\n  link.style.display = 'none';\n  frame.style.display = 'none';\n\n  frame.name = blobURL;\n  document.body.appendChild(frame);\n\n  link.href = blobURL;\n  link.target = blobURL;\n  link.download = `${name}.${extension}`;\n  document.body.appendChild(link);\n  link.dispatchEvent(new MouseEvent('click'));\n  document.body.removeChild(link);\n\n  return new Promise<void>((resolve) => {\n    setTimeout(\n      () => {\n        document.body.removeChild(frame);\n        resolve();\n      },\n      100,\n    );\n  });\n}\n","/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n'use strict';\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data.buffer)\n            .slice(data.byteOffset, data.byteOffset + data.byteLength)\n            .buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data)\n            || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data)\n            || (data && this.isArrayBuffer(data.buffer));\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < aView.length; i++) {\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        let buffers;\n        if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {\n            buffers = args[0];\n        }\n        else if (Array.isArray(args[0]) && args[1] instanceof Function) {\n            buffers = args[0];\n        }\n        else {\n            if (args[args.length - 1] instanceof Function) {\n                buffers = args.slice(0, args.length - 1);\n            }\n            else {\n                buffers = args;\n            }\n        }\n        let size = 0;\n        for (const buffer of buffers) {\n            size += buffer.byteLength;\n        }\n        const res = new Uint8Array(size);\n        let offset = 0;\n        for (const buffer of buffers) {\n            const view = this.toUint8Array(buffer);\n            res.set(view, offset);\n            offset += view.length;\n        }\n        if (args[args.length - 1] instanceof Function) {\n            return this.toView(res, args[args.length - 1]);\n        }\n        return res.buffer;\n    }\n}\n\nconst STRING_TYPE = \"string\";\nconst HEX_REGEX = /^[0-9a-f]+$/i;\nconst BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\nconst BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) {\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for (let i = 0; i < text.length; i++) {\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === STRING_TYPE\n            && HEX_REGEX.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === STRING_TYPE\n            && BASE64_REGEX.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === STRING_TYPE\n            && BASE64URL_REGEX.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        }\n        else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        }\n        else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for (let i = 0; i < stringLength; i++) {\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let result = \"\";\n        const len = buf.length;\n        for (let i = 0; i < len; i++) {\n            const byte = buf[i];\n            if (byte < 16) {\n                result += \"0\";\n            }\n            result += byte.toString(16);\n        }\n        return result;\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for (let i = 0; i < formatted.length; i = i + 2) {\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - (base64.length % 4);\n        if (padCount < 4) {\n            for (let i = 0; i < padCount; i++) {\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for (let i = 1; i < arguments.length; i++) {\n        const obj = arguments[i];\n        for (const prop in obj) {\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\n        for (const item2 of arr) {\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\n\nimport { downloadFromBuffer } from './download_from_buffer';\n\nexport class Download {\n  public static cert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-cert',\n      );\n    },\n  };\n\n  public static attrCert = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'cer',\n        'application/pkix-attr-cert',\n      );\n    },\n  };\n\n  public static csr = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'csr',\n        'application/pkcs10',\n      );\n    },\n  };\n\n  public static crl = {\n    asPEM: (pem: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(pem),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n\n    asDER: (hex: string, name: string) => {\n      downloadFromBuffer(\n        Convert.FromString(hex),\n        name,\n        'crl',\n        'application/pkix-crl',\n      );\n    },\n  };\n}\n"],"mappings":"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"}