{"version":3,"names":["__extends","Attribute","_super","raw","_this","call","this","AsnAttribute","asnExtnValue","getAsnExtnValue","asn","type","id_DomainNameBeneficiary","value","AsnParser","parse","DomainNameBeneficiary","id_DomainNameLegalRepresentative","DomainNameLegalRepresentative","id_DomainNameOwner","DomainNameOwner","id_DomainNameTechnicalOperator","DomainNameTechnicalOperator","id_TypeRelationship","TypeRelationship","id_ActivityDescription","ActivityDescription","id_WebGDPR","WebGDPR","id_InsuranceValue","InsuranceValue","id_ValuationRanking","ValuationRanking","id_pkcs9_at_challengePassword","ChallengePassword","id_pkcs9_at_unstructuredName","UnstructuredName","id_pkcs9_at_extensionRequest","extensionRequest","ExtensionRequest","map","e","Extension","AsnConvert","serialize","Convert","ToHex","prototype","values","AsnData","X509AttributeCertificate","certificateRawToBuffer","AttributeCertificate","thumbprints","acinfo","serialNumber","version","notBefore","attrCertValidityPeriod","notBeforeTime","Error","notAfter","notAfterTime","validity","dateDiff","issuer","v1Form","_a","v2Form","issuerName","holder","Object","defineProperty","_b","signatureValue","signatureAlgorithm","algorithm","parseExtensions","extensions","parseAttributes","attributes","getThumbprint","getCertificateThumbprint","thumbprint","sent","console","error","error_1","exportAsBase64","ToBase64","exportAsHexFormatted","hexFormat","exportAsPemFormatted","concat","base64Format","downloadAsPEM","name","Download","attrCert","asPEM","commonName","downloadAsDER","asDER","CSR","CertificationRequest","certificationRequestInfo","subject","Name","toJSON","subjectPKInfo","subjectPublicKey","params","id_ecPublicKey","parameters","ECParameters","id_rsaEncryption","RSAPublicKey","spki","signature","i","length","shortName","error_2","csr","CRL","CertificateList","tbsCertList","lastUpdate","thisUpdate","getTime","nextUpdate","revokedCertificates","revokedCertificate","revocationDate","userCertificate","crlEntryExtensions","error_3","crlExtensions","crl"],"sources":["src/crypto/attribute.ts","src/crypto/x509_attribute_certificate.ts","src/crypto/csr.ts","src/crypto/crl.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\nimport { AsnParser, AsnConvert } from '@peculiar/asn1-schema';\nimport { Attribute as AsnAttribute } from '@peculiar/asn1-x509';\nimport {\n  id_DomainNameBeneficiary,\n  DomainNameBeneficiary,\n\n  id_DomainNameLegalRepresentative,\n  DomainNameLegalRepresentative,\n\n  id_DomainNameOwner,\n  DomainNameOwner,\n\n  id_DomainNameTechnicalOperator,\n  DomainNameTechnicalOperator,\n\n  id_TypeRelationship,\n  TypeRelationship,\n\n  id_ActivityDescription,\n  ActivityDescription,\n\n  id_WebGDPR,\n  WebGDPR,\n\n  id_InsuranceValue,\n  InsuranceValue,\n\n  id_ValuationRanking,\n  ValuationRanking,\n} from '@peculiar/asn1-ntqwac';\nimport {\n  id_pkcs9_at_extensionRequest,\n  ExtensionRequest,\n\n  id_pkcs9_at_challengePassword,\n  ChallengePassword,\n\n  id_pkcs9_at_unstructuredName,\n  UnstructuredName,\n} from '@peculiar/asn1-pkcs9';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\n\nexport type TAttributeValue = DomainNameBeneficiary\n| DomainNameLegalRepresentative\n| DomainNameOwner\n| DomainNameTechnicalOperator\n| TypeRelationship\n| ActivityDescription\n| WebGDPR\n| InsuranceValue\n| ValuationRanking\n| Extension<TExtensionValue>[]\n| ChallengePassword\n| UnstructuredName\n| string;\n\nexport class Attribute<T extends TAttributeValue> extends AsnData<AsnAttribute> {\n  public readonly value: T;\n\n  private getAsnExtnValue() {\n    return this.asn.values[0];\n  }\n\n  constructor(raw: BufferSource) {\n    super(raw, AsnAttribute);\n\n    const asnExtnValue = this.getAsnExtnValue();\n\n    switch (this.asn.type) {\n      case id_DomainNameBeneficiary:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameBeneficiary) as T;\n        break;\n      case id_DomainNameLegalRepresentative:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameLegalRepresentative) as T;\n        break;\n      case id_DomainNameOwner:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameOwner) as T;\n        break;\n      case id_DomainNameTechnicalOperator:\n        this.value = AsnParser.parse(asnExtnValue, DomainNameTechnicalOperator) as T;\n        break;\n      case id_TypeRelationship:\n        this.value = AsnParser.parse(asnExtnValue, TypeRelationship) as T;\n        break;\n      case id_ActivityDescription:\n        this.value = AsnParser.parse(asnExtnValue, ActivityDescription) as T;\n        break;\n      case id_WebGDPR:\n        this.value = AsnParser.parse(asnExtnValue, WebGDPR) as T;\n        break;\n      case id_InsuranceValue:\n        this.value = AsnParser.parse(asnExtnValue, InsuranceValue) as T;\n        break;\n      case id_ValuationRanking:\n        this.value = AsnParser.parse(asnExtnValue, ValuationRanking) as T;\n        break;\n      case id_pkcs9_at_challengePassword:\n        this.value = AsnParser.parse(asnExtnValue, ChallengePassword) as T;\n        break;\n      case id_pkcs9_at_unstructuredName:\n        this.value = AsnParser.parse(asnExtnValue, UnstructuredName) as T;\n        break;\n      case id_pkcs9_at_extensionRequest: {\n        const extensionRequest = AsnParser.parse(asnExtnValue, ExtensionRequest);\n\n        this.value = extensionRequest\n          .map((e) => new Extension(AsnConvert.serialize(e))) as T;\n        break;\n      }\n      default:\n        this.value = Convert.ToHex(asnExtnValue) as T;\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport type { GeneralName } from '@peculiar/asn1-x509';\nimport { AttributeCertificate, Holder } from '@peculiar/asn1-x509-attr';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Extension, TExtensionValue } from './extension';\nimport { Attribute, TAttributeValue } from './attribute';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport class X509AttributeCertificate extends AsnData<AttributeCertificate> {\n  public readonly serialNumber: string;\n\n  public readonly version: number;\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly issuer: GeneralName[];\n\n  public holder: Holder;\n\n  public type: string = 'X.509 Attribute Certificate';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), AttributeCertificate);\n\n    const { acinfo } = this.asn;\n\n    this.serialNumber = Convert.ToHex(acinfo.serialNumber);\n    this.version = acinfo.version;\n\n    const notBefore = acinfo.attrCertValidityPeriod.notBeforeTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = acinfo.attrCertValidityPeriod.notAfterTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n    this.issuer = acinfo.issuer.v1Form || acinfo.issuer.v2Form?.issuerName;\n    this.holder = acinfo.holder;\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public parseExtensions() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.extensions) {\n      this.extensions = acinfo.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public parseAttributes() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.attributes) {\n      this.attributes = acinfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN ATTRIBUTE CERTIFICATE-----\\n${base64Format(this.exportAsBase64())}\\n-----END ATTRIBUTE CERTIFICATE-----`;\n  }\n\n  public get commonName(): string {\n    return `attribute-certificate-${this.thumbprints['SHA-1']}`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.attrCert.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.attrCert.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { ECParameters, id_ecPublicKey } from '@peculiar/asn1-ecc';\nimport { id_rsaEncryption, RSAPublicKey } from '@peculiar/asn1-rsa';\nimport { CertificationRequest } from '@peculiar/asn1-csr';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport { Attribute, TAttributeValue } from './attribute';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\ninterface IPublicKey {\n  algorithm: string;\n  value: BufferSource;\n  params?: ECParameters | RSAPublicKey;\n}\n\nexport class CSR extends AsnData<CertificationRequest> {\n  public readonly subject: INameJSON[];\n\n  public readonly version: number;\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public type: string = 'PKCS#10 Certificate Request';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificationRequest);\n\n    const { certificationRequestInfo } = this.asn;\n\n    this.subject = new Name(certificationRequestInfo.subject).toJSON();\n    this.version = certificationRequestInfo.version;\n  }\n\n  public get publicKey(): IPublicKey {\n    const { subjectPublicKey, algorithm } = this.asn.certificationRequestInfo.subjectPKInfo;\n    let params;\n\n    if (algorithm.algorithm === id_ecPublicKey && algorithm.parameters) {\n      params = AsnConvert.parse(algorithm.parameters, ECParameters);\n    }\n\n    if (algorithm.algorithm === id_rsaEncryption) {\n      params = AsnConvert.parse(subjectPublicKey, RSAPublicKey);\n    }\n\n    const spki = AsnConvert.serialize(this.asn.certificationRequestInfo.subjectPKInfo);\n\n    return {\n      params,\n      value: spki,\n      algorithm: algorithm.algorithm,\n    };\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.subject) {\n      return '';\n    }\n\n    for (let i = 0; i < this.subject.length; i += 1) {\n      const name = this.subject[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public parseAttributes() {\n    const { certificationRequestInfo } = this.asn;\n\n    if (certificationRequestInfo.attributes) {\n      this.attributes = certificationRequestInfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN CERTIFICATE REQUEST-----\\n${base64Format(this.exportAsBase64())}\\n-----END CERTIFICATE REQUEST-----`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.csr.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.csr.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { CertificateList, Time } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport interface IRevokedCertificate {\n  userCertificate: ArrayBuffer;\n  revocationDate: Time;\n  crlEntryExtensions?: Extension<TExtensionValue>[];\n}\n\nexport class CRL extends AsnData<CertificateList> {\n  public readonly issuer: INameJSON[];\n\n  public readonly version: number;\n\n  public readonly lastUpdate: Date;\n\n  public readonly nextUpdate: Date;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public revokedCertificates: IRevokedCertificate[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public type: string = 'X.509 Certificate Revocation List';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificateList);\n\n    const { tbsCertList } = this.asn;\n\n    this.issuer = new Name(tbsCertList.issuer).toJSON();\n    this.version = tbsCertList.version + 1;\n    this.lastUpdate = tbsCertList.thisUpdate.getTime();\n    this.nextUpdate = tbsCertList.nextUpdate.getTime();\n\n    this.revokedCertificates = (tbsCertList.revokedCertificates || [])\n      .map((revokedCertificate) => ({\n        revocationDate: revokedCertificate.revocationDate,\n        userCertificate: revokedCertificate.userCertificate,\n        crlEntryExtensions: revokedCertificate.crlEntryExtensions\n          ?.map((e) => new Extension(AsnConvert.serialize(e))),\n      }));\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public parseExtensions() {\n    const { tbsCertList } = this.asn;\n\n    if (tbsCertList.crlExtensions) {\n      this.extensions = tbsCertList.crlExtensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN X509 CRL-----\\n${base64Format(this.exportAsBase64())}\\n-----END X509 CRL-----`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.crl.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.crl.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}