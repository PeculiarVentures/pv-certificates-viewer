{"version":3,"names":["__extends","X509AttributeCertificate","_super","raw","_this","call","this","certificateRawToBuffer","AttributeCertificate","thumbprints","type","tag","acinfo","asn","serialNumber","Convert","ToHex","version","notBefore","attrCertValidityPeriod","notBeforeTime","Error","notAfter","notAfterTime","validity","dateDiff","issuer","v1Form","_a","v2Form","issuerName","holder","Object","defineProperty","prototype","_b","signatureValue","signatureAlgorithm","value","algorithm","parseExtensions","extensions","map","e","Extension","AsnConvert","serialize","parseAttributes","attributes","Attribute","getThumbprint","getCertificateThumbprint","thumbprint","sent","console","error","error_1","concat","toString","format","hexFormat","base64Format","ToBase64","downloadAsPEM","name","Download","attrCert","asPEM","commonName","downloadAsDER","asDER","AsnData","X509Crl","CertificateList","tbsCertList","Name","toJSON","lastUpdate","thisUpdate","getTime","nextUpdate","revokedCertificates","revokedCertificate","revocationDate","userCertificate","crlEntryExtensions","error_2","signature","i","length","shortName","crlExtensions","crl"],"sources":["src/crypto/x509_attribute_certificate.ts","src/crypto/x509_crl.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport type { GeneralName } from '@peculiar/asn1-x509';\nimport { AttributeCertificate, Holder } from '@peculiar/asn1-x509-attr';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Extension, TExtensionValue } from './extension';\nimport { Attribute, TAttributeValue } from './attribute';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport class X509AttributeCertificate extends AsnData<AttributeCertificate> {\n  public readonly serialNumber: string;\n\n  public readonly version: number;\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly issuer: GeneralName[];\n\n  public holder: Holder;\n\n  public readonly type = 'X.509 Attribute Certificate';\n\n  public readonly tag = 'ATTRIBUTE CERTIFICATE';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), AttributeCertificate);\n\n    const { acinfo } = this.asn;\n\n    this.serialNumber = Convert.ToHex(acinfo.serialNumber);\n    this.version = acinfo.version;\n\n    const notBefore = acinfo.attrCertValidityPeriod.notBeforeTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = acinfo.attrCertValidityPeriod.notAfterTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n    this.issuer = acinfo.issuer.v1Form || acinfo.issuer.v2Form?.issuerName;\n    this.holder = acinfo.holder;\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public parseExtensions() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.extensions) {\n      this.extensions = acinfo.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public parseAttributes() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.attributes) {\n      this.attributes = acinfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get commonName(): string {\n    return `attribute-certificate-${this.thumbprints['SHA-1']}`;\n  }\n\n  public toString(format: 'hex' | 'pem' | 'base64' = 'pem'): string {\n    switch (format) {\n      case 'hex':\n        return hexFormat(Convert.ToHex(this.raw));\n      case 'pem':\n        return `-----BEGIN ${this.tag}-----\\n${base64Format(this.toString('base64'))}\\n-----END ${this.tag}-----`;\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.attrCert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.attrCert.asDER(\n      this.toString('hex'),\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { CertificateList, Time } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport interface IRevokedCertificate {\n  userCertificate: ArrayBuffer;\n  revocationDate: Time;\n  crlEntryExtensions?: Extension<TExtensionValue>[];\n}\n\nexport class X509Crl extends AsnData<CertificateList> {\n  public readonly issuer: INameJSON[];\n\n  public readonly version: number;\n\n  public readonly lastUpdate: Date;\n\n  public readonly nextUpdate: Date;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public revokedCertificates: IRevokedCertificate[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'X.509 Certificate Revocation List';\n\n  public readonly tag = 'X509 CRL';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificateList);\n\n    const { tbsCertList } = this.asn;\n\n    this.issuer = new Name(tbsCertList.issuer).toJSON();\n    this.version = tbsCertList.version + 1;\n    this.lastUpdate = tbsCertList.thisUpdate.getTime();\n    this.nextUpdate = tbsCertList.nextUpdate.getTime();\n\n    this.revokedCertificates = (tbsCertList.revokedCertificates || [])\n      .map((revokedCertificate) => ({\n        revocationDate: revokedCertificate.revocationDate,\n        userCertificate: revokedCertificate.userCertificate,\n        crlEntryExtensions: revokedCertificate.crlEntryExtensions\n          ?.map((e) => new Extension(AsnConvert.serialize(e))),\n      }));\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public parseExtensions() {\n    const { tbsCertList } = this.asn;\n\n    if (tbsCertList.crlExtensions) {\n      this.extensions = tbsCertList.crlExtensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public toString(format: 'hex' | 'pem' | 'base64' = 'pem'): string {\n    switch (format) {\n      case 'hex':\n        return hexFormat(Convert.ToHex(this.raw));\n      case 'pem':\n        return `-----BEGIN ${this.tag}-----\\n${base64Format(this.toString('base64'))}\\n-----END ${this.tag}-----`;\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.crl.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.crl.asDER(\n      this.toString('hex'),\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}