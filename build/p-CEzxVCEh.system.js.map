{"version":3,"file":"p-CEzxVCEh.system.js","sources":["src/crypto/x509_attribute_certificate.ts","src/crypto/x509_crl.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport type { GeneralName } from '@peculiar/asn1-x509';\nimport { AttributeCertificate, Holder } from '@peculiar/asn1-x509-attr';\nimport { Convert } from 'pvtsutils';\nimport { dateDiff, Download } from '../utils';\nimport { AsnData } from './asn_data';\nimport { Extension, TExtensionValue } from './extension';\nimport { Attribute, TAttributeValue } from './attribute';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport class X509AttributeCertificate extends AsnData<AttributeCertificate> {\n  public readonly serialNumber: string;\n\n  public readonly version: number;\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly issuer: GeneralName[];\n\n  public holder: Holder;\n\n  public readonly type = 'X.509 Attribute Certificate';\n\n  public readonly tag = PemConverter.AttributeCertificateTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), AttributeCertificate);\n\n    const { acinfo } = this.asn;\n\n    this.serialNumber = Convert.ToHex(acinfo.serialNumber);\n    this.version = acinfo.version;\n\n    const notBefore = acinfo.attrCertValidityPeriod.notBeforeTime;\n\n    if (!notBefore) {\n      throw new Error('Cannot get \\'notBefore\\' value');\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = acinfo.attrCertValidityPeriod.notAfterTime;\n\n    if (!notAfter) {\n      throw new Error('Cannot get \\'notAfter\\' value');\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n    this.issuer = acinfo.issuer.v1Form || acinfo.issuer.v2Form?.issuerName;\n    this.holder = acinfo.holder;\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public parseExtensions() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.extensions) {\n      this.extensions = acinfo.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public parseAttributes() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.attributes) {\n      this.attributes = acinfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public async getThumbprint(\n    algorithm = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get commonName(): string {\n    return `attribute-certificate-${this.thumbprints['SHA-1']}`;\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.attrCert.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.attrCert.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { CertificateList, Time } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\nimport { Download } from '../utils';\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport { PemConverter } from './pem_converter';\nimport {\n  certificateRawToBuffer,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport interface IRevokedCertificate {\n  userCertificate: ArrayBuffer;\n  revocationDate: Time;\n  crlEntryExtensions?: Extension<TExtensionValue>[];\n}\n\nexport class X509Crl extends AsnData<CertificateList> {\n  public readonly issuer: INameJSON[];\n\n  public readonly version: number;\n\n  public readonly lastUpdate: Date;\n\n  public readonly nextUpdate: Date;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public revokedCertificates: IRevokedCertificate[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly type = 'X.509 Certificate Revocation List';\n\n  public readonly tag = PemConverter.CrlTag;\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificateList);\n\n    const { tbsCertList } = this.asn;\n\n    this.issuer = new Name(tbsCertList.issuer).toJSON();\n    this.version = tbsCertList.version + 1;\n    this.lastUpdate = tbsCertList.thisUpdate.getTime();\n    this.nextUpdate = tbsCertList.nextUpdate.getTime();\n\n    this.revokedCertificates = (tbsCertList.revokedCertificates || [])\n      .map((revokedCertificate) => ({\n        revocationDate: revokedCertificate.revocationDate,\n        userCertificate: revokedCertificate.userCertificate,\n        crlEntryExtensions: revokedCertificate.crlEntryExtensions\n          ?.map((e) => new Extension(AsnConvert.serialize(e))),\n      }));\n  }\n\n  public async getThumbprint(\n    algorithm = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public parseExtensions() {\n    const { tbsCertList } = this.asn;\n\n    if (tbsCertList.crlExtensions) {\n      this.extensions = tbsCertList.crlExtensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public toString(format: 'pem' | 'base64' | 'base64url' = 'pem'): string {\n    switch (format) {\n      case 'pem':\n        return PemConverter.encode(this.raw, this.tag);\n      case 'base64url':\n        return Convert.ToBase64Url(this.raw);\n      default:\n        return Convert.ToBase64(this.raw);\n    }\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.crl.asPEM(\n      this.toString('pem'),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.crl.asDER(\n      this.raw,\n      name || this.commonName,\n    );\n  }\n}\n"],"names":["Convert"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAAA;;;;;;YAMG;YAqBG,MAAO,wBAAyB,SAAQ,OAA6B,CAAA;YAyBzE,IAAA,WAAA,CAAY,GAAW,EAAA;;oBACrB,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,EAAE,oBAAoB,CAAC;oBAXnD,IAAW,CAAA,WAAA,GAA2B,EAAE;oBAM/B,IAAI,CAAA,IAAA,GAAG,6BAA6B;YAEpC,QAAA,IAAA,CAAA,GAAG,GAAG,YAAY,CAAC,uBAAuB;YAKxD,QAAA,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG;oBAE3B,IAAI,CAAC,YAAY,GAAGA,oBAAO,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC;YACtD,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;YAE7B,QAAA,MAAM,SAAS,GAAG,MAAM,CAAC,sBAAsB,CAAC,aAAa;oBAE7D,IAAI,CAAC,SAAS,EAAE;YACd,YAAA,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC;;YAGnD,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS;YAE1B,QAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,sBAAsB,CAAC,YAAY;oBAE3D,IAAI,CAAC,QAAQ,EAAE;YACb,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC;;YAGlD,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;YACxB,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC;YACvD,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,KAAI,CAAA,EAAA,GAAA,MAAM,CAAC,MAAM,CAAC,MAAM,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,UAAU,CAAA;YACtE,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM;;YAG7B,IAAA,IAAW,SAAS,GAAA;oBAClB,MAAM,EAAE,cAAc,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,GAAG;oBAEvD,OAAO;YACL,YAAA,KAAK,EAAE,cAAc;wBACrB,SAAS,EAAE,kBAAkB,CAAC,SAAS;qBACxC;;gBAGI,eAAe,GAAA;YACpB,QAAA,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG;YAE3B,QAAA,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,YAAA,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACtB,iBAAA,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;;gBAIlD,eAAe,GAAA;YACpB,QAAA,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG;YAE3B,QAAA,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,YAAA,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACtB,iBAAA,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;;YAIlD,IAAA,MAAM,aAAa,CACxB,SAAS,GAAG,OAAO,EAAA;YAEnB,QAAA,IAAI;wBACF,MAAM,UAAU,GAAG,MAAM,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC;wBAEtE,IAAI,UAAU,EAAE;YACd,gBAAA,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAGA,oBAAO,CAAC,KAAK,CAAC,UAAU,CAAC;;;oBAEzD,OAAO,KAAK,EAAE;YACd,YAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC;;;YAIjD,IAAA,IAAW,UAAU,GAAA;oBACnB,OAAO,CAAA,sBAAA,EAAyB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;;gBAGtD,QAAQ,CAAC,SAAyC,KAAK,EAAA;oBAC5D,QAAQ,MAAM;YACZ,YAAA,KAAK,KAAK;YACR,gBAAA,OAAO,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;YAChD,YAAA,KAAK,WAAW;4BACd,OAAOA,oBAAO,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;YACtC,YAAA;4BACE,OAAOA,oBAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;;;YAIhC,IAAA,aAAa,CAAC,IAAa,EAAA;YAChC,QAAA,QAAQ,CAAC,QAAQ,CAAC,KAAK,CACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EACpB,IAAI,IAAI,IAAI,CAAC,UAAU,CACxB;;YAGI,IAAA,aAAa,CAAC,IAAa,EAAA;YAChC,QAAA,QAAQ,CAAC,QAAQ,CAAC,KAAK,CACrB,IAAI,CAAC,GAAG,EACR,IAAI,IAAI,IAAI,CAAC,UAAU,CACxB;;YAEJ;;YCrJD;;;;;;YAMG;YAyBG,MAAO,OAAQ,SAAQ,OAAwB,CAAA;YAmBnD,IAAA,WAAA,CAAY,GAAW,EAAA;oBACrB,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,EAAE,eAAe,CAAC;oBAP9C,IAAW,CAAA,WAAA,GAA2B,EAAE;oBAE/B,IAAI,CAAA,IAAA,GAAG,mCAAmC;YAE1C,QAAA,IAAA,CAAA,GAAG,GAAG,YAAY,CAAC,MAAM;YAKvC,QAAA,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,GAAG;YAEhC,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE;oBACnD,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,GAAG,CAAC;oBACtC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE;oBAClD,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE;oBAElD,IAAI,CAAC,mBAAmB,GAAG,CAAC,WAAW,CAAC,mBAAmB,IAAI,EAAE;YAC9D,aAAA,GAAG,CAAC,CAAC,kBAAkB,KAAI;;YAAC,YAAA,QAAC;4BAC5B,cAAc,EAAE,kBAAkB,CAAC,cAAc;4BACjD,eAAe,EAAE,kBAAkB,CAAC,eAAe;4BACnD,kBAAkB,EAAE,MAAA,kBAAkB,CAAC,kBAAkB,MACrD,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACvD,aAAA;YAAC,SAAA,CAAC;;YAGA,IAAA,MAAM,aAAa,CACxB,SAAS,GAAG,OAAO,EAAA;YAEnB,QAAA,IAAI;wBACF,MAAM,UAAU,GAAG,MAAM,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC;wBAEtE,IAAI,UAAU,EAAE;YACd,gBAAA,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAGA,oBAAO,CAAC,KAAK,CAAC,UAAU,CAAC;;;oBAEzD,OAAO,KAAK,EAAE;YACd,YAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC;;;YAIjD,IAAA,IAAW,SAAS,GAAA;oBAClB,MAAM,EAAE,SAAS,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,GAAG;oBAElD,OAAO;YACL,YAAA,KAAK,EAAE,SAAS;wBAChB,SAAS,EAAE,kBAAkB,CAAC,SAAS;qBACxC;;YAGH,IAAA,IAAW,UAAU,GAAA;YACnB,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,YAAA,OAAO,EAAE;;YAGX,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;wBAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAE3B,YAAA,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,KAAK,GAAG,EAAE;4BAC/E,OAAO,IAAI,CAAC,KAAK;;;YAIrB,QAAA,OAAO,EAAE;;gBAGJ,eAAe,GAAA;YACpB,QAAA,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,GAAG;YAEhC,QAAA,IAAI,WAAW,CAAC,aAAa,EAAE;YAC7B,YAAA,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;YAC3B,iBAAA,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;;gBAIlD,QAAQ,CAAC,SAAyC,KAAK,EAAA;oBAC5D,QAAQ,MAAM;YACZ,YAAA,KAAK,KAAK;YACR,gBAAA,OAAO,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;YAChD,YAAA,KAAK,WAAW;4BACd,OAAOA,oBAAO,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;YACtC,YAAA;4BACE,OAAOA,oBAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;;;YAIhC,IAAA,aAAa,CAAC,IAAa,EAAA;YAChC,QAAA,QAAQ,CAAC,GAAG,CAAC,KAAK,CAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EACpB,IAAI,IAAI,IAAI,CAAC,UAAU,CACxB;;YAGI,IAAA,aAAa,CAAC,IAAa,EAAA;YAChC,QAAA,QAAQ,CAAC,GAAG,CAAC,KAAK,CAChB,IAAI,CAAC,GAAG,EACR,IAAI,IAAI,IAAI,CAAC,UAAU,CACxB;;YAEJ;;;;;;;;"}