{"version":3,"names":["CertificateSummary","props","certificate","showIssuer","renderRow","name","value","h","Typography","variant","color","l10n","getString","subjectToString","issuerToString","serialNumber","version","validity","dateShort","notBefore","notAfter","certificatesViewerCss","CertificatesViewer","constructor","hostRef","this","isHasRoots","certificates","filterWithSearch","highlightWithSearch","mobileMediaQueryString","mobileScreenView","search","certificatesDecoded","isDecodeInProcess","handleClickDetails","certificateSelectedForDetails","detailsOpen","emit","handleModalClose","undefined","detailsClose","handleSearch","event","target","trim","handleMediaQueryChange","matches","componentWillLoad","certificatesDecodeAndSet","mobileMediaQuery","window","matchMedia","addEventListener","bind","disconnectedCallback","removeEventListener","watchCertificates","newValue","oldValue","JSON","stringify","hasRoots","Array","isArray","data","decoded","X509Certificate","getThumbprint","push","body","tests","isRoot","error","console","getCertificateName","commonName","handleClickDownloadAsPem","downloadAsPEM","handleClickDownloadAsDer","downloadAsDER","handleClickRow","index","isExpandedRowClicked","expandedRow","getMaxColSpanValue","colSpan","renderCertificateButtonActions","isHasTestURLs","expired","revoked","valid","class","groups","title","options","text","startIcon","DetailsIcon","onClick","DownloadIcon","_a","href","LinkIcon","_b","_c","renderExpandedRow","renderCertificatesRows","searchHighlight","content","forEach","isExpandedRow","publicKeyValue","OIDs","signature","algorithm","certificateStringForSearch","issuerCommonName","thumbprints","join","toLowerCase","indexOf","certificate_row","m_expanded","key","Button","ArrowTopIcon","ArrowBottomIcon","renderCertificateDetailsModal","role","part","CrossIcon","renderSearch","type","disabled","length","placeholder","onInput","renderEmptyState","renderEmptySearchState","renderLoadingState","renderTableBody","certificatesRows","render","Host","String"],"sources":["src/components/certificate-summary/certificate-summary.tsx","src/components/certificates-viewer/certificates-viewer.scss?tag=peculiar-certificates-viewer&encapsulation=shadow","src/components/certificates-viewer/certificates-viewer.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { FunctionalComponent, h } from '@stencil/core';\nimport type { X509Certificate } from '../../crypto';\nimport { dateShort, l10n } from '../../utils';\nimport { Typography } from '../typography';\n\ninterface ICertificateSummaryProps {\n  certificate: X509Certificate;\n  showIssuer?: boolean;\n}\n\nexport const CertificateSummary: FunctionalComponent<ICertificateSummaryProps> = (props) => {\n  const {\n    certificate,\n    showIssuer,\n  } = props;\n\n  const renderRow = (name: string | string[], value: string | number) => (\n    <tr>\n      <td>\n        <Typography\n          variant=\"b2\"\n          color=\"gray-9\"\n        >\n          {name}\n        </Typography>\n      </td>\n      <td>\n        <Typography\n          variant=\"b2\"\n          color=\"black\"\n        >\n          {value}\n        </Typography>\n      </td>\n    </tr>\n  );\n\n  return (\n    <table>\n      <tbody>\n        {renderRow(\n          l10n.getString('subjectName'),\n          certificate.subjectToString(),\n        )}\n        {showIssuer && renderRow(\n          l10n.getString('issuerName'),\n          certificate.issuerToString(),\n        )}\n\n        {renderRow(\n          l10n.getString('serialNumber'),\n          certificate.serialNumber,\n        )}\n        {renderRow(\n          l10n.getString('version'),\n          certificate.version,\n        )}\n        {renderRow(\n          l10n.getString('validity'),\n          certificate.validity,\n        )}\n        {renderRow(\n          l10n.getString('issued'),\n          dateShort(certificate.notBefore),\n        )}\n        {renderRow(\n          l10n.getString('expired'),\n          dateShort(certificate.notAfter),\n        )}\n      </tbody>\n    </table>\n  );\n};\n","@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n  word-wrap: break-word;\n  min-width: 280px;\n  overflow: auto;\n  position: relative;\n}\n\n.search_section {\n  padding: var(--pv-size-base-4);\n  border-bottom: 1px solid var(--pv-color-gray-4);\n}\n\n.input_search {\n  height: var(--pv-size-base-8);\n  width: 100%;\n  outline: none;\n  background-color: var(--pv-color-gray-1);\n  padding: 0 var(--pv-size-base-2);\n  border: 1px solid var(--pv-color-gray-7);\n  border-radius: 4px;\n  transition: background-color 200ms ease 0s, color 200ms ease 0s, border-color 200ms ease 0s;\n  &::placeholder {\n    color: var(--pv-color-gray-9);\n  }\n}\n\ntable {\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: collapse;\n  border-spacing: 0;\n\n  td, th {\n    border-bottom: 1px solid var(--pv-color-gray-4);\n    vertical-align: top;\n    text-align: left;\n\n    &:first-child {\n      padding-right: 0;\n      width: var(--pv-size-base-10);\n    }\n    &:last-child {\n      padding-left: 0;\n      width: var(--pv-size-base-10);\n    }\n  }\n\n  th {\n    padding: var(--pv-size-base-2) var(--pv-size-base-4);\n\n    &.col_action {\n      padding: 0;\n    }\n  }\n\n  td {\n    padding: var(--pv-size-base-4);\n  }\n\n  tr {\n    &.m_expanded {\n      background: var(--pv-color-gray-1);\n\n      > td {\n        border-bottom: none;\n      }\n    }\n\n    &.expanded_summary {\n      background: var(--pv-color-gray-1);\n\n      table {\n        table-layout: initial;\n\n        td {\n          border-bottom: none;\n          padding: var(--pv-size-base-2);\n\n          &:first-child {\n            width: 200px;\n          }\n\n          &:last-child {\n            width: auto;\n          }\n        }\n      }\n    }\n  }\n}\n\n.button_table_cell {\n  margin-top: -3px;\n}\n\n.status_wrapper {\n  text-align: center;\n  height: var(--pv-size-base-16);\n  vertical-align: middle;\n}\n\n.modal_wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  animation: fadeIn 200ms;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal_backdrop {\n  background: var(--pv-color-black);\n  z-index: -1;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  opacity: 0.5;\n}\n\n.modal_container {\n  background: var(--pv-color-white);\n  width: 100%;\n  display: flex;\n  max-height: calc(100% - 60px);\n  flex-direction: column;\n  margin: var(--pv-size-base-6);\n  position: relative;\n  outline: none;\n  box-shadow: var(--pv-shadow-dark-hight);\n  overflow: hidden;\n  border: 0px;\n  padding: 0px;\n  max-width: 640px;\n  border-radius: 4px;\n}\n\n.modal_header {\n  padding: var(--pv-size-base-3) var(--pv-size-base-4);\n  display: flex;\n  flex: 0 0 auto;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n  gap: var(--pv-size-base-2);\n  border-bottom: 1px solid var(--pv-color-gray-5);\n}\n\n.modal_content {\n  flex: 1 1 auto;\n  overflow: auto;\n}\n\n:host([data-mobile-screen-view=\"true\"]) {\n  table, tbody, tr, td {\n    display: block;\n    width: 100% !important;\n    padding: 0;\n    border: none;\n  }\n\n  thead {\n    display: none;\n  }\n\n  table {\n    tr {\n      padding: var(--pv-size-base-2) 0;\n    }\n\n    .expanded_summary {\n      padding: 0;\n    }\n\n    .certificate_row {\n      border-bottom: 1px solid var(--pv-color-gray-5);\n      padding: var(--pv-size-base-2) var(--pv-size-base-4);\n    }\n\n    .certificate_row_actions {\n      padding-top: var(--pv-size-base-6);\n\n      td {\n        display: flex;\n        justify-content: right;\n        gap: var(--pv-size-base-4);\n      }\n    }\n  }\n\n  .button_table_cell {\n    margin-top: 0;\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  h,\n  Prop,\n  State,\n  Watch,\n  Host,\n  Event,\n  EventEmitter,\n  Build,\n} from '@stencil/core';\nimport { X509Certificate } from '../../crypto';\nimport { OIDs } from '../../constants/oids';\nimport { l10n } from '../../utils';\nimport { Typography } from '../typography';\nimport { CertificateSummary } from '../certificate-summary';\nimport { Button } from '../button';\nimport {\n  DownloadIcon,\n  LinkIcon,\n  DetailsIcon,\n  ArrowBottomIcon,\n  ArrowTopIcon,\n  CrossIcon,\n} from '../icons';\n\nexport interface ICertificate {\n  value: string;\n  name?: string | ((certificate: X509Certificate) => string);\n  tests?: {\n    valid?: string;\n    revoked?: string;\n    expired?: string;\n  };\n}\n\ninterface ICertificateDecoded {\n  body: X509Certificate;\n  tests?: ICertificate['tests'];\n  name?: ICertificate['name'];\n}\n\n@Component({\n  tag: 'peculiar-certificates-viewer',\n  styleUrl: 'certificates-viewer.scss',\n  shadow: true,\n})\nexport class CertificatesViewer {\n  private isHasRoots = false;\n\n  private mobileMediaQuery: MediaQueryList;\n\n  /**\n   * List of certificates values for decode and show in the list.\n   * <br />\n   * **NOTE**: If you do not provide a `name` value when\n   * invocing the component it will take the first Subject CN value.\n   * <br />\n   * **NOTE**: If you do not provide a `tests` this column will be ommited from the rendered page.\n   * <br />\n   * **NOTE**: If the supplied certificates are self-signed the issuer column will be ommited.\n   */\n  @Prop() certificates: ICertificate[] = [];\n\n  /**\n   * Use filter in the list when search is changed.\n   */\n  @Prop() filterWithSearch = true;\n\n  /**\n   * Use highlight chapters in the list when search is changed.\n   */\n  @Prop() highlightWithSearch = true;\n\n  /**\n   * Mobile media query string to control screen view change.\n   * <br />\n   * **NOTE**: Based on https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia.\n   * @example\n   *  (max-width: 900px)\n   */\n  @Prop({ reflect: false }) mobileMediaQueryString?: string = '(max-width: 900px)';\n\n  /**\n   * Emitted when the user open certificate details modal.\n   */\n  @Event() detailsOpen!: EventEmitter<X509Certificate>;\n\n  /**\n   * Emitted when the user close certificate details modal.\n   */\n  @Event() detailsClose!: EventEmitter<void>;\n\n  @State() mobileScreenView = false;\n\n  @State() search = '';\n\n  @State() certificatesDecoded: ICertificateDecoded[] = [];\n\n  @State() expandedRow?: number;\n\n  @State() certificateSelectedForDetails?: X509Certificate;\n\n  @State() isDecodeInProcess = true;\n\n  private handleMediaQueryChange(event: MediaQueryListEvent) {\n    this.mobileScreenView = event.matches;\n  }\n\n  componentWillLoad() {\n    this.certificatesDecodeAndSet();\n\n    if (Build.isBrowser) {\n      this.mobileMediaQuery = window.matchMedia(this.mobileMediaQueryString);\n      this.mobileMediaQuery.addEventListener('change', this.handleMediaQueryChange.bind(this));\n      this.mobileScreenView = this.mobileMediaQuery.matches;\n    }\n  }\n\n  disconnectedCallback() {\n    this.mobileMediaQuery.removeEventListener('change', this.handleMediaQueryChange.bind(this));\n  }\n\n  @Watch('certificates')\n  watchCertificates(newValue: ICertificate[], oldValue: ICertificate[]) {\n    /**\n     * Prevent rerender after set the same `certificates` prop.\n     */\n    if (JSON.stringify(newValue) !== JSON.stringify(oldValue)) {\n      this.certificatesDecodeAndSet();\n    }\n  }\n\n  async certificatesDecodeAndSet() {\n    let hasRoots = false;\n\n    if (!Array.isArray(this.certificates)) {\n      return;\n    }\n\n    const data: ICertificateDecoded[] = [];\n\n    for (const certificate of this.certificates) {\n      try {\n        const decoded = new X509Certificate(certificate.value);\n\n        await decoded.getThumbprint('SHA-1');\n\n        data.push({\n          body: decoded,\n          tests: certificate.tests,\n          name: certificate.name,\n        });\n\n        if (!hasRoots && decoded.isRoot) {\n          hasRoots = true;\n        }\n      } catch (error) {\n        console.error('Error certificate parse:', error);\n      }\n    }\n\n    this.isHasRoots = hasRoots;\n    this.isDecodeInProcess = false;\n    this.certificatesDecoded = data;\n  }\n\n  private getCertificateName(certificate: ICertificateDecoded) {\n    if (typeof certificate.name === 'function') {\n      return certificate.name(certificate.body);\n    }\n\n    return certificate.name || certificate.body.commonName;\n  }\n\n  private handleClickDownloadAsPem(certificate: ICertificateDecoded) {\n    certificate.body.downloadAsPEM(this.getCertificateName(certificate));\n  }\n\n  private handleClickDownloadAsDer(certificate: ICertificateDecoded) {\n    certificate.body.downloadAsDER(this.getCertificateName(certificate));\n  }\n\n  private handleClickDetails = (certificate: X509Certificate) => {\n    this.certificateSelectedForDetails = certificate;\n    this.detailsOpen.emit(certificate);\n  };\n\n  private handleModalClose = () => {\n    this.certificateSelectedForDetails = undefined;\n\n    this.detailsClose.emit();\n  };\n\n  private handleClickRow(index: number) {\n    const isExpandedRowClicked = this.expandedRow === index;\n\n    this.expandedRow = isExpandedRowClicked\n      ? undefined\n      : index;\n  }\n\n  private handleSearch = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n\n    this.search = target.value.trim();\n  };\n\n  private getMaxColSpanValue() {\n    let colSpan = 5;\n\n    if (!this.isHasRoots) {\n      colSpan += 1;\n    }\n\n    return colSpan;\n  }\n\n  private renderCertificateButtonActions(certificate: ICertificateDecoded) {\n    const isHasTestURLs = certificate.tests\n      && (certificate.tests.expired || certificate.tests.revoked || certificate.tests.valid);\n\n    return (\n      <peculiar-button-menu\n        class=\"button_table_cell\"\n        groups={[\n          {\n            title: l10n.getString('previewCertificate'),\n            options: [\n              {\n                text: l10n.getString('viewDetails'),\n                startIcon: <DetailsIcon />,\n                onClick: () => this.handleClickDetails(certificate.body),\n              },\n            ],\n          },\n          {\n            title: l10n.getString('downloadOptions'),\n            options: [\n              {\n                text: l10n.getString('download.pem'),\n                startIcon: <DownloadIcon />,\n                onClick: () => this.handleClickDownloadAsPem(certificate),\n              },\n              {\n                text: l10n.getString('download.der'),\n                startIcon: <DownloadIcon />,\n                onClick: () => this.handleClickDownloadAsDer(certificate),\n              },\n            ],\n          },\n          ...(isHasTestURLs\n            ? [{\n                title: l10n.getString('testURLs'),\n                options: [\n                  ...(certificate.tests?.valid\n                    ? [{\n                        text: l10n.getString('valid'),\n                        href: certificate.tests.valid,\n                        startIcon: <LinkIcon />,\n                      }]\n                    : []),\n                  ...(certificate.tests?.revoked\n                    ? [{\n                        text: l10n.getString('revoked'),\n                        href: certificate.tests.revoked,\n                        startIcon: <LinkIcon />,\n                      }]\n                    : []),\n                  ...(certificate.tests?.expired\n                    ? [{\n                        text: l10n.getString('expired'),\n                        href: certificate.tests.expired,\n                        startIcon: <LinkIcon />,\n                      }]\n                    : []),\n                ],\n              }]\n            : []),\n        ]}\n      />\n    );\n  }\n\n  private renderExpandedRow(certificate: X509Certificate) {\n    const colSpan = this.getMaxColSpanValue() - 2;\n\n    return (\n      <tr class=\"expanded_summary\">\n        <td />\n        <td colSpan={colSpan}>\n          <CertificateSummary\n            certificate={certificate}\n            showIssuer={!certificate.isRoot}\n          />\n        </td>\n        <td />\n      </tr>\n    );\n  }\n\n  private renderCertificatesRows() {\n    const searchHighlight = this.highlightWithSearch\n      ? this.search\n      : '';\n    const content = [];\n\n    this.certificatesDecoded.forEach((certificate, index) => {\n      const isExpandedRow = index === this.expandedRow;\n      const publicKeyValue = OIDs[certificate.body.signature.algorithm]\n        || certificate.body.signature.algorithm;\n\n      if (this.filterWithSearch && this.search) {\n        const certificateStringForSearch = [\n          publicKeyValue,\n          certificate.body.issuerCommonName,\n          this.getCertificateName(certificate),\n          certificate.body.thumbprints['SHA-1'],\n        ]\n          .join(' ')\n          .toLowerCase();\n\n        if (certificateStringForSearch.indexOf(this.search.toLowerCase()) === -1) {\n          return;\n        }\n      }\n\n      if (this.mobileScreenView) {\n        content.push([\n          <tr\n            class={{\n              certificate_row: true,\n              m_expanded: isExpandedRow,\n            }}\n            key={certificate.body.thumbprints['SHA-1']}\n          >\n            <td>\n              <table>\n                <tbody>\n                  {!this.isHasRoots && (\n                    <tr>\n                      <td>\n                        <Typography variant=\"b2\" color=\"gray-9\">\n                          {l10n.getString('issuer')}\n                        </Typography>\n                      </td>\n                      <td>\n                        <Typography variant=\"b2\" color=\"black\">\n                          <peculiar-highlight-words search={searchHighlight}>\n                            {certificate.body.issuerCommonName}\n                          </peculiar-highlight-words>\n                        </Typography>\n                      </td>\n                    </tr>\n                  )}\n                  <tr>\n                    <td>\n                      <Typography variant=\"b2\" color=\"gray-9\">\n                        {l10n.getString('name')}\n                      </Typography>\n                    </td>\n                    <td>\n                      <Typography variant=\"b2\" color=\"black\">\n                        <peculiar-highlight-words search={searchHighlight}>\n                          {this.getCertificateName(certificate)}\n                        </peculiar-highlight-words>\n                      </Typography>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <Typography variant=\"b2\" color=\"gray-9\">\n                        {l10n.getString('publicKey')}\n                      </Typography>\n                    </td>\n                    <td>\n                      <Typography variant=\"b2\" color=\"black\">\n                        <peculiar-highlight-words search={searchHighlight}>\n                          {publicKeyValue}\n                        </peculiar-highlight-words>\n                      </Typography>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <Typography variant=\"b2\" color=\"gray-9\">\n                        {l10n.getString('fingerprint')}\n                        &nbsp; (SHA-1)\n                      </Typography>\n                    </td>\n                    <td>\n                      <Typography variant=\"b2\" color=\"black\">\n                        <peculiar-highlight-words search={searchHighlight}>\n                          {certificate.body.thumbprints['SHA-1']}\n                        </peculiar-highlight-words>\n                      </Typography>\n                    </td>\n                  </tr>\n                  {isExpandedRow && this.renderExpandedRow(certificate.body)}\n                  <tr class=\"certificate_row_actions\">\n                    <td>\n                      {this.renderCertificateButtonActions(certificate)}\n                      <Button\n                        startIcon={isExpandedRow ? <ArrowTopIcon /> : <ArrowBottomIcon />}\n                        onClick={this.handleClickRow.bind(this, index)}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </td>\n          </tr>,\n        ]);\n\n        return;\n      }\n\n      content.push([\n        <tr\n          class={{ m_expanded: isExpandedRow }}\n          key={certificate.body.thumbprints['SHA-1']}\n        >\n          <td>\n            <Button\n              startIcon={isExpandedRow ? <ArrowTopIcon /> : <ArrowBottomIcon />}\n              class=\"button_table_cell\"\n\n              onClick={this.handleClickRow.bind(this, index)}\n            />\n          </td>\n          {!this.isHasRoots && (\n            <td>\n              <Typography>\n                <peculiar-highlight-words search={searchHighlight}>\n                  {certificate.body.issuerCommonName}\n                </peculiar-highlight-words>\n              </Typography>\n            </td>\n          )}\n          <td>\n            <Typography>\n              <peculiar-highlight-words search={searchHighlight}>\n                {this.getCertificateName(certificate)}\n              </peculiar-highlight-words>\n            </Typography>\n          </td>\n          <td>\n            <Typography>\n              <peculiar-highlight-words search={searchHighlight}>\n                {publicKeyValue}\n              </peculiar-highlight-words>\n            </Typography>\n          </td>\n          <td>\n            <Typography>\n              <peculiar-highlight-words search={searchHighlight}>\n                {certificate.body.thumbprints['SHA-1']}\n              </peculiar-highlight-words>\n            </Typography>\n          </td>\n          <td>\n            {this.renderCertificateButtonActions(certificate)}\n          </td>\n        </tr>,\n        isExpandedRow && this.renderExpandedRow(certificate.body),\n      ]);\n    });\n\n    return content;\n  }\n\n  private renderCertificateDetailsModal() {\n    if (!this.certificateSelectedForDetails) {\n      return null;\n    }\n\n    return (\n      <div\n        class=\"modal_wrapper\"\n        role=\"presentation\"\n        aria-hidden=\"false\"\n        part=\"presentation\"\n      >\n        <div\n          class=\"modal_backdrop\"\n          aria-hidden=\"true\"\n          onClick={this.handleModalClose}\n        />\n        <div\n          class=\"modal_container\"\n          role=\"dialog\"\n          part=\"presentation_container\"\n        >\n          <header class=\"modal_header\">\n            <Typography\n              variant=\"h4\"\n            >\n              {l10n.getString('certificateDetails')}\n            </Typography>\n            <Button\n              startIcon={<CrossIcon />}\n              onClick={this.handleModalClose}\n            />\n          </header>\n          <div class=\"modal_content\">\n            <peculiar-certificate-viewer\n              certificate={this.certificateSelectedForDetails}\n              mobileMediaQueryString={this.mobileMediaQueryString}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private renderSearch() {\n    if (!this.filterWithSearch && !this.highlightWithSearch) {\n      return null;\n    }\n\n    return (\n      <div class=\"search_section\">\n        <input\n          type=\"search\"\n          value=\"\"\n          class=\"input_search t-b3 c-black\"\n          disabled={!this.certificatesDecoded.length}\n          placeholder=\"Search\"\n          onInput={this.handleSearch}\n        />\n      </div>\n    );\n  }\n\n  private renderEmptyState() {\n    const colSpan = this.getMaxColSpanValue();\n\n    return (\n      <tr>\n        <td\n          class=\"status_wrapper\"\n          colSpan={colSpan}\n        >\n          <Typography\n            variant=\"b1\"\n          >\n            There are no certificates available.\n          </Typography>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderEmptySearchState() {\n    const colSpan = this.getMaxColSpanValue();\n\n    return (\n      <tr>\n        <td\n          class=\"status_wrapper\"\n          colSpan={colSpan}\n        >\n          <Typography\n            variant=\"b1\"\n          >\n            No results found for &ldquo;\n            {this.search}\n            &ldquo;\n          </Typography>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderLoadingState() {\n    return (\n      <div class=\"loading_container\">\n        <peculiar-circular-progress />\n      </div>\n    );\n  }\n\n  private renderTableBody() {\n    if (this.isDecodeInProcess) {\n      return null;\n    }\n\n    if (!this.certificatesDecoded.length) {\n      return this.renderEmptyState();\n    }\n\n    const certificatesRows = this.renderCertificatesRows();\n\n    if (this.search && !certificatesRows.length) {\n      return this.renderEmptySearchState();\n    }\n\n    return certificatesRows;\n  }\n\n  render() {\n    return (\n      <Host\n        data-mobile-screen-view={String(this.mobileScreenView)}\n      >\n        {this.renderSearch()}\n        <table>\n          {!this.mobileScreenView && (\n            <thead>\n              <tr>\n                <th />\n                {!this.isHasRoots && (\n                  <th class=\"col_issuer\">\n                    <Typography variant=\"s2\">\n                      {l10n.getString('issuer')}\n                    </Typography>\n                  </th>\n                )}\n                <th class=\"col_name\">\n                  <Typography variant=\"s2\">\n                    {l10n.getString('name')}\n                  </Typography>\n                </th>\n                <th class=\"col_public_key\">\n                  <Typography variant=\"s2\">\n                    {l10n.getString('publicKey')}\n                  </Typography>\n                </th>\n                <th class=\"col_fingerprint\">\n                  <Typography variant=\"s2\">\n                    {l10n.getString('fingerprint')}\n                    &nbsp; (SHA-1)\n                  </Typography>\n                </th>\n                <th />\n              </tr>\n            </thead>\n          )}\n          <tbody>\n            {this.renderTableBody()}\n          </tbody>\n        </table>\n\n        {this.renderCertificateDetailsModal()}\n        {this.isDecodeInProcess && this.renderLoadingState()}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}