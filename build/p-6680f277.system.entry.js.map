{"version":3,"names":["readAsBinaryString","file","Promise","resolve","reject","reader","FileReader","onload","value","result","fileName","name","fileSize","size","sourceMime","type","onerror","error","certificateDecoderCss","PeculiarCertificateDecoderStyle0","CertificateDecoder","exports","this","handleClickDecode","_this","inputPaste","decode","handleClickClear","clearValue","handleChangeInputFile","event","__awaiter","element","target","files","_b","sent","handleChangeExample","handleDropFile","stopPropagation","preventDefault","dataTransfer","class_1","prototype","componentDidLoad","defaultCertificate","setTimeout","certificateDecoded","clearCertificate","emit","setValue","exportAsPemFormatted","successParse","exportAsBase64","certificate","isPem","validator.isPem","isX509Pem","validator.isX509Pem","isPkcs10Pem","validator.isPkcs10Pem","isX509AttributePem","validator.isX509AttributePem","isX509CRLPem","validator.isX509CRLPem","decoded","decodeError","alert","X509Certificate","X509AttributeCertificate","CSR","CRL","console","log","render","h","Host","key","placeholder","class","ref","el","onDrop","Typography","variant","color","accept","onChange","_a","certificateExamples","length","map","example","title","Button","onClick","download"],"sources":["src/utils/read_file.ts","src/components/certificate-decoder/certificate-decoder.scss?tag=peculiar-certificate-decoder&encapsulation=shadow","src/components/certificate-decoder/certificate-decoder.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport type FileValue = string | ArrayBuffer | null;\nexport interface IFileDataType extends Blob {\n  name?: string;\n  mimeType?: string;\n  lastModified?: number;\n}\nexport interface IReadFileResult {\n  value: FileValue;\n  fileName: string | undefined;\n  fileSize: number | undefined;\n  sourceMime: string | undefined;\n}\n\n/**\n * Read file as Binary string\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsBinaryString(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsBinaryString(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsBinaryString(file);\n  });\n}\n\n/**\n * Read file as ArrayBuffer\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsArrayBuffer(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsArrayBuffer(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n/**\n * Read file as Data URL\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsDataUrl(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsDataUrl(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Read file as Text\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsText(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsText(file: IFileDataType, options?: string): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsText(file, options);\n  });\n}\n","@import '../../css/base.scss';\n\n:host {\n  display: block;\n  width: 100%;\n}\n\n.textarea {\n  min-height: 300px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid var(--pv-color-gray-5);;\n  padding: 14px;\n  font-family: monospace;\n  resize: vertical;\n}\n\n.viewer {\n  margin-top: var(--pv-size-base-12);\n}\n\n.controls {\n  margin-top: var(--pv-size-base-2);\n  display: flex;\n  flex-direction: column;\n  gap: var(--pv-size-base-2);\n}\n\n.control_row {\n  display: flex;\n  align-items: center;\n  gap: var(--pv-size-base);\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Host,\n  h,\n  State,\n  Prop,\n  Event,\n  EventEmitter,\n} from '@stencil/core';\n\nimport { validator, readAsBinaryString } from '../../utils';\nimport {\n  X509Certificate,\n  X509AttributeCertificate,\n  CSR,\n  CRL,\n} from '../../crypto';\nimport { Button } from '../button';\nimport { Typography } from '../typography';\n\n@Component({\n  tag: 'peculiar-certificate-decoder',\n  styleUrl: 'certificate-decoder.scss',\n  shadow: true,\n})\nexport class CertificateDecoder {\n  private inputPaste?: HTMLTextAreaElement;\n\n  /**\n   * The example certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() certificateExamples?: {\n    title: string;\n    value: string;\n  }[];\n\n  /**\n   * The default certificate value for decode and show details. Use PEM or DER.\n   */\n  @Prop() defaultCertificate?: string;\n\n  @State() certificateDecoded: X509Certificate | X509AttributeCertificate | CSR | CRL;\n\n  /**\n   * Emitted when the certificate has been successfully parsed.\n   */\n  @Event() successParse!: EventEmitter<string>;\n\n  /**\n   * Emitted when the certificate has been removed.\n   */\n  @Event() clearCertificate!: EventEmitter<void>;\n\n  componentDidLoad() {\n    if (this.defaultCertificate) {\n      /**\n       * Prevent Stencil warning about re-render\n       */\n      setTimeout(() => this.decode(this.defaultCertificate), 100);\n    }\n  }\n\n  private handleClickDecode = () => {\n    const { value } = this.inputPaste;\n\n    if (value) {\n      this.decode(value);\n    }\n  };\n\n  private handleClickClear = () => {\n    this.clearValue();\n  };\n\n  private handleChangeInputFile = async (event: any) => {\n    const element = event.target;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode(file.value);\n      }\n\n      element.value = '';\n    }\n  };\n\n  private handleChangeExample = (event: any) => {\n    if (event.target.value) {\n      this.decode(event.target.value);\n    } else {\n      this.clearValue();\n    }\n  };\n\n  private handleDropFile = async (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const element = event.dataTransfer;\n\n    if (element.files) {\n      const file = await readAsBinaryString(element.files[0]);\n\n      if (typeof file.value === 'string') {\n        this.decode(file.value);\n      }\n    }\n  };\n\n  clearValue() {\n    this.inputPaste.value = '';\n    this.certificateDecoded = null;\n    this.clearCertificate.emit();\n  }\n\n  setValue(value: X509Certificate | X509AttributeCertificate | CSR | CRL) {\n    this.certificateDecoded = value;\n    this.inputPaste.value = value.exportAsPemFormatted();\n    this.successParse.emit(value.exportAsBase64());\n  }\n\n  decode(certificate: string) {\n    const isPem = validator.isPem(certificate);\n    const isX509Pem = validator.isX509Pem(certificate);\n    const isPkcs10Pem = validator.isPkcs10Pem(certificate);\n    const isX509AttributePem = validator.isX509AttributePem(certificate);\n    const isX509CRLPem = validator.isX509CRLPem(certificate);\n    let decoded: X509Certificate | X509AttributeCertificate | CSR | CRL;\n    let decodeError: Error;\n\n    if (isPem && !(isX509Pem || isX509AttributePem || isPkcs10Pem || isX509CRLPem)) {\n      this.clearValue();\n\n      alert('Unsupported file type. Please try to use Certificate/AttributeCertificate/CertificateRequest/CRL.');\n\n      return;\n    }\n\n    try {\n      if (isX509Pem) {\n        decoded = new X509Certificate(certificate);\n      }\n\n      if (isX509AttributePem) {\n        decoded = new X509AttributeCertificate(certificate);\n      }\n\n      if (isPkcs10Pem) {\n        decoded = new CSR(certificate);\n      }\n\n      if (isX509CRLPem) {\n        decoded = new CRL(certificate);\n      }\n    } catch (error) {\n      decodeError = error;\n    }\n\n    if (!decoded) {\n      try {\n        decoded = new X509Certificate(certificate);\n      } catch (error) {\n        decodeError = error;\n      }\n    }\n\n    if (!decoded) {\n      try {\n        decoded = new X509AttributeCertificate(certificate);\n      } catch (error) {\n        decodeError = error;\n      }\n    }\n\n    if (!decoded) {\n      try {\n        decoded = new CSR(certificate);\n      } catch (error) {\n        decodeError = error;\n      }\n    }\n\n    if (!decoded) {\n      try {\n        decoded = new CRL(certificate);\n      } catch (error) {\n        decodeError = error;\n      }\n    }\n\n    if (!decoded) {\n      this.clearValue();\n\n      console.log(decodeError);\n      alert('Error decoding file. Please try to use Certificate/AttributeCertificate/CertificateRequest/CRL.');\n    } else {\n      this.setValue(decoded);\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <textarea\n          placeholder=\"Certificate DER or PEM\"\n          class=\"textarea t-b2 c-black\"\n          ref={(el) => { this.inputPaste = el; }}\n          onDrop={this.handleDropFile}\n        />\n        <div class=\"controls\">\n          <div class=\"control_row\">\n            <Typography\n              variant=\"b3\"\n              color=\"secondary-tint-2\"\n            >\n              Drag or load file:\n            </Typography>\n            <input\n              type=\"file\"\n              accept=\"application/pkix-cert,application/x-x509-ca-cert,application/x-x509-user-cert,application/pkcs10,application/pkix-crl,.csr,.req,.crl\"\n              onChange={this.handleChangeInputFile}\n              value=\"\"\n            />\n          </div>\n          {this.certificateExamples?.length && (\n            <div class=\"control_row\">\n              <Typography\n                variant=\"b3\"\n                color=\"secondary-tint-2\"\n              >\n                Load examples:\n              </Typography>\n              <select onChange={this.handleChangeExample}>\n                <option value=\"\">None</option>\n                {this.certificateExamples.map((example) => (\n                  <option value={example.value}>\n                    {example.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          <div class=\"control_row\">\n            <Button\n              onClick={this.handleClickDecode}\n            >\n              Decode\n            </Button>\n            <Button\n              onClick={this.handleClickClear}\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n        {this.certificateDecoded instanceof X509Certificate && (\n          <peculiar-certificate-viewer\n            certificate={this.certificateDecoded}\n            class=\"viewer\"\n            download\n          />\n        )}\n        {this.certificateDecoded instanceof X509AttributeCertificate && (\n          <peculiar-attribute-certificate-viewer\n            certificate={this.certificateDecoded}\n            class=\"viewer\"\n            download\n          />\n        )}\n        {this.certificateDecoded instanceof CSR && (\n          <peculiar-csr-viewer\n            certificate={this.certificateDecoded}\n            class=\"viewer\"\n            download\n          />\n        )}\n        {this.certificateDecoded instanceof CRL && (\n          <peculiar-crl-viewer\n            certificate={this.certificateDecoded}\n            class=\"viewer\"\n            download\n          />\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}