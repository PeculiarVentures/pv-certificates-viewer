{"version":3,"file":"p-F2F0McJX.js","sources":["src/utils/read_file.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport type FileValue = string | ArrayBuffer | null;\nexport interface IFileDataType extends Blob {\n  name?: string;\n  mimeType?: string;\n  lastModified?: number;\n}\nexport interface IReadFileResult {\n  value: FileValue;\n  fileName: string | undefined;\n  fileSize: number | undefined;\n  sourceMime: string | undefined;\n}\n\n/**\n * Read file as Binary string\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsBinaryString(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsBinaryString(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsBinaryString(file);\n  });\n}\n\n/**\n * Read file as ArrayBuffer\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsArrayBuffer(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsArrayBuffer(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n/**\n * Read file as Data URL\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsDataUrl(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsDataUrl(file: IFileDataType): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Read file as Text\n *\n * @example\n * ```js\n *    const file = new File(['file'], 'file.pdf', { type: 'text/plain' });\n *    readAsText(file)\n *      .then(result => console.log('Readed success', result))\n *      .catch(err => console.log('An error occured when reading file', err));\n * ```\n */\n\nexport function readAsText(file: IFileDataType, options?: string): Promise<IReadFileResult> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve({\n      value: reader.result,\n      fileName: file.name,\n      fileSize: file.size,\n      sourceMime: file.type,\n    });\n\n    reader.onerror = () => reject(reader.error);\n\n    reader.readAsText(file, options);\n  });\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;AAMG;AAeH;;;;;;;;;;AAUG;AAEG,SAAU,kBAAkB,CAAC,IAAmB,EAAA;IACpD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;AACrC,QAAA,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AAE/B,QAAA,MAAM,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC;YAC5B,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,UAAU,EAAE,IAAI,CAAC,IAAI;AACtB,SAAA,CAAC;AAEF,QAAA,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;AAE3C,QAAA,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC;AACjC,KAAC,CAAC;AACJ;AAEA;;;;;;;;;;AAUG;AAEG,SAAU,iBAAiB,CAAC,IAAmB,EAAA;IACnD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;AACrC,QAAA,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AAE/B,QAAA,MAAM,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC;YAC5B,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,UAAU,EAAE,IAAI,CAAC,IAAI;AACtB,SAAA,CAAC;AAEF,QAAA,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;AAE3C,QAAA,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC;AAChC,KAAC,CAAC;AACJ;AAEA;;;;;;;;;;AAUG;AAEG,SAAU,aAAa,CAAC,IAAmB,EAAA;IAC/C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;AACrC,QAAA,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AAE/B,QAAA,MAAM,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC;YAC5B,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,UAAU,EAAE,IAAI,CAAC,IAAI;AACtB,SAAA,CAAC;AAEF,QAAA,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;AAE3C,QAAA,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;AAC5B,KAAC,CAAC;AACJ;AAEA;;;;;;;;;;AAUG;AAEa,SAAA,UAAU,CAAC,IAAmB,EAAE,OAAgB,EAAA;IAC9D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;AACrC,QAAA,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AAE/B,QAAA,MAAM,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC;YAC5B,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,UAAU,EAAE,IAAI,CAAC,IAAI;AACtB,SAAA,CAAC;AAEF,QAAA,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;AAE3C,QAAA,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC;AAClC,KAAC,CAAC;AACJ;;;;"}