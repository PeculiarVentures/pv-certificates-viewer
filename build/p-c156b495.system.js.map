{"version":3,"names":["attributesParsers","_b","id_DomainNameBeneficiary","DomainNameBeneficiary","id_DomainNameLegalRepresentative","DomainNameLegalRepresentative","id_DomainNameOwner","DomainNameOwner","id_DomainNameTechnicalOperator","DomainNameTechnicalOperator","id_TypeRelationship","TypeRelationship","id_ActivityDescription","ActivityDescription","id_WebGDPR","WebGDPR","id_InsuranceValue","InsuranceValue","id_ValuationRanking","ValuationRanking","id_pkcs9_at_challengePassword","ChallengePassword","id_pkcs9_at_unstructuredName","UnstructuredName","id_pkcs9_at_extensionRequest","ExtensionRequest","__extends","Attribute","_super","raw","_this","call","this","AsnAttribute","asnExtnValue","getAsnExtnValue","target","asn","type","value","AsnParser","parse","console","warn","concat","Convert","ToHex","error","message","prototype","values","AsnData","X509AttributeCertificate","certificateRawToBuffer","AttributeCertificate","thumbprints","acinfo","serialNumber","version","notBefore","attrCertValidityPeriod","notBeforeTime","Error","notAfter","notAfterTime","validity","dateDiff","issuer","v1Form","_a","v2Form","issuerName","holder","Object","defineProperty","signatureValue","signatureAlgorithm","algorithm","parseExtensions","extensions","map","e","Extension","AsnConvert","serialize","parseAttributes","attributes","getThumbprint","getCertificateThumbprint","thumbprint","sent","error_1","exportAsBase64","ToBase64","exportAsHexFormatted","hexFormat","exportAsPemFormatted","base64Format","downloadAsPEM","name","Download","attrCert","asPEM","commonName","downloadAsDER","asDER","CSR","CertificationRequest","certificationRequestInfo","subject","Name","toJSON","subjectPKInfo","subjectPublicKey","params","id_ecPublicKey","parameters","ECParameters","id_rsaEncryption","RSAPublicKey","spki","signature","i","length","shortName","error_2","extensionRequestAttribute","find","attribute","csr","CRL","CertificateList","tbsCertList","lastUpdate","thisUpdate","getTime","nextUpdate","revokedCertificates","revokedCertificate","revocationDate","userCertificate","crlEntryExtensions","error_3","crlExtensions","crl"],"sources":["src/crypto/attribute.ts","src/crypto/x509_attribute_certificate.ts","src/crypto/csr.ts","src/crypto/crl.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Convert } from 'pvtsutils';\nimport { AsnParser } from '@peculiar/asn1-schema';\nimport { Attribute as AsnAttribute } from '@peculiar/asn1-x509';\nimport {\n  id_DomainNameBeneficiary,\n  DomainNameBeneficiary,\n\n  id_DomainNameLegalRepresentative,\n  DomainNameLegalRepresentative,\n\n  id_DomainNameOwner,\n  DomainNameOwner,\n\n  id_DomainNameTechnicalOperator,\n  DomainNameTechnicalOperator,\n\n  id_TypeRelationship,\n  TypeRelationship,\n\n  id_ActivityDescription,\n  ActivityDescription,\n\n  id_WebGDPR,\n  WebGDPR,\n\n  id_InsuranceValue,\n  InsuranceValue,\n\n  id_ValuationRanking,\n  ValuationRanking,\n} from '@peculiar/asn1-ntqwac';\nimport {\n  id_pkcs9_at_extensionRequest,\n  ExtensionRequest,\n\n  id_pkcs9_at_challengePassword,\n  ChallengePassword,\n\n  id_pkcs9_at_unstructuredName,\n  UnstructuredName,\n} from '@peculiar/asn1-pkcs9';\n\nimport { AsnData } from './asn_data';\n\nconst attributesParsers = {\n  [id_DomainNameBeneficiary]: DomainNameBeneficiary,\n  [id_DomainNameLegalRepresentative]: DomainNameLegalRepresentative,\n  [id_DomainNameOwner]: DomainNameOwner,\n  [id_DomainNameTechnicalOperator]: DomainNameTechnicalOperator,\n  [id_TypeRelationship]: TypeRelationship,\n  [id_ActivityDescription]: ActivityDescription,\n  [id_WebGDPR]: WebGDPR,\n  [id_InsuranceValue]: InsuranceValue,\n  [id_ValuationRanking]: ValuationRanking,\n  [id_pkcs9_at_challengePassword]: ChallengePassword,\n  [id_pkcs9_at_unstructuredName]: UnstructuredName,\n  [id_pkcs9_at_extensionRequest]: ExtensionRequest,\n};\n\ntype TAttributeKeys = keyof typeof attributesParsers;\nexport type TAttributeValue = InstanceType<typeof attributesParsers[TAttributeKeys]> | string;\n\nexport class Attribute<T extends TAttributeValue> extends AsnData<AsnAttribute> {\n  public readonly value: T;\n\n  private getAsnExtnValue() {\n    return this.asn.values[0];\n  }\n\n  constructor(raw: BufferSource) {\n    super(raw, AsnAttribute);\n\n    const asnExtnValue = this.getAsnExtnValue();\n\n    try {\n      const target = attributesParsers[this.asn.type];\n\n      if (target) {\n        this.value = AsnParser.parse<T>(asnExtnValue, target);\n      } else {\n        console.warn(`Didn't detect parser for \"${this.asn.type}\" attribute.`);\n\n        this.value = Convert.ToHex(asnExtnValue) as T;\n      }\n    } catch (error) {\n      console.error(`Error parse \"${this.asn.type}\" attribute:`, error.message);\n\n      this.value = Convert.ToHex(asnExtnValue) as T;\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport type { GeneralName } from '@peculiar/asn1-x509';\nimport { AttributeCertificate, Holder } from '@peculiar/asn1-x509-attr';\nimport { Convert } from 'pvtsutils';\n\nimport { dateDiff, Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Extension, TExtensionValue } from './extension';\nimport { Attribute, TAttributeValue } from './attribute';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport class X509AttributeCertificate extends AsnData<AttributeCertificate> {\n  public readonly serialNumber: string;\n\n  public readonly version: number;\n\n  public readonly notBefore: Date;\n\n  public readonly notAfter: Date;\n\n  public readonly validity: string;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public readonly issuer: GeneralName[];\n\n  public holder: Holder;\n\n  public type: string = 'X.509 Attribute Certificate';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), AttributeCertificate);\n\n    const { acinfo } = this.asn;\n\n    this.serialNumber = Convert.ToHex(acinfo.serialNumber);\n    this.version = acinfo.version;\n\n    const notBefore = acinfo.attrCertValidityPeriod.notBeforeTime;\n\n    if (!notBefore) {\n      throw new Error(\"Cannot get 'notBefore' value\");\n    }\n\n    this.notBefore = notBefore;\n\n    const notAfter = acinfo.attrCertValidityPeriod.notAfterTime;\n\n    if (!notAfter) {\n      throw new Error(\"Cannot get 'notAfter' value\");\n    }\n\n    this.notAfter = notAfter;\n    this.validity = dateDiff(this.notBefore, this.notAfter);\n    this.issuer = acinfo.issuer.v1Form || acinfo.issuer.v2Form?.issuerName;\n    this.holder = acinfo.holder;\n  }\n\n  public get signature(): ISignature {\n    const { signatureValue, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signatureValue,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public parseExtensions() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.extensions) {\n      this.extensions = acinfo.extensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public parseAttributes() {\n    const { acinfo } = this.asn;\n\n    if (acinfo.attributes) {\n      this.attributes = acinfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n    }\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN ATTRIBUTE CERTIFICATE-----\\n${base64Format(this.exportAsBase64())}\\n-----END ATTRIBUTE CERTIFICATE-----`;\n  }\n\n  public get commonName(): string {\n    return `attribute-certificate-${this.thumbprints['SHA-1']}`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.attrCert.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.attrCert.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { ECParameters, id_ecPublicKey } from '@peculiar/asn1-ecc';\nimport { id_rsaEncryption, RSAPublicKey } from '@peculiar/asn1-rsa';\nimport { CertificationRequest } from '@peculiar/asn1-csr';\nimport {\n  id_pkcs9_at_extensionRequest,\n  ExtensionRequest,\n} from '@peculiar/asn1-pkcs9';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport { Attribute, TAttributeValue } from './attribute';\nimport { Extension, TExtensionValue } from './extension';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\ninterface IPublicKey {\n  algorithm: string;\n  value: BufferSource;\n  params?: ECParameters | RSAPublicKey;\n}\n\nexport class CSR extends AsnData<CertificationRequest> {\n  public readonly subject: INameJSON[];\n\n  public readonly version: number;\n\n  public attributes: Attribute<TAttributeValue>[];\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public type: string = 'PKCS#10 Certificate Request';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificationRequest);\n\n    const { certificationRequestInfo } = this.asn;\n\n    this.subject = new Name(certificationRequestInfo.subject).toJSON();\n    this.version = certificationRequestInfo.version;\n  }\n\n  public get publicKey(): IPublicKey {\n    const { subjectPublicKey, algorithm } = this.asn.certificationRequestInfo.subjectPKInfo;\n    let params;\n\n    if (algorithm.algorithm === id_ecPublicKey && algorithm.parameters) {\n      params = AsnConvert.parse(algorithm.parameters, ECParameters);\n    }\n\n    if (algorithm.algorithm === id_rsaEncryption) {\n      params = AsnConvert.parse(subjectPublicKey, RSAPublicKey);\n    }\n\n    const spki = AsnConvert.serialize(this.asn.certificationRequestInfo.subjectPKInfo);\n\n    return {\n      params,\n      value: spki,\n      algorithm: algorithm.algorithm,\n    };\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.subject) {\n      return '';\n    }\n\n    for (let i = 0; i < this.subject.length; i += 1) {\n      const name = this.subject[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public parseAttributes() {\n    const { certificationRequestInfo } = this.asn;\n\n    if (certificationRequestInfo.attributes) {\n      this.attributes = certificationRequestInfo.attributes\n        .map((e) => new Attribute(AsnConvert.serialize(e)));\n\n      const extensionRequestAttribute = this.attributes.find(\n        (attribute) => attribute.asn.type === id_pkcs9_at_extensionRequest,\n      ) as Attribute<ExtensionRequest>;\n\n      if (extensionRequestAttribute) {\n        this.extensions = extensionRequestAttribute.value\n          .map((e) => new Extension(AsnConvert.serialize(e)));\n      }\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN CERTIFICATE REQUEST-----\\n${base64Format(this.exportAsBase64())}\\n-----END CERTIFICATE REQUEST-----`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.csr.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.csr.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) Peculiar Ventures, LLC.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AsnConvert } from '@peculiar/asn1-schema';\nimport { CertificateList, Time } from '@peculiar/asn1-x509';\nimport { Convert } from 'pvtsutils';\n\nimport { Download } from '../utils';\n\nimport { Extension, TExtensionValue } from './extension';\nimport { AsnData } from './asn_data';\nimport { Name, INameJSON } from './name';\nimport {\n  certificateRawToBuffer,\n  hexFormat,\n  base64Format,\n  getCertificateThumbprint,\n} from './utils';\n\ninterface ISignature {\n  algorithm: string;\n  value: BufferSource;\n}\n\nexport interface IRevokedCertificate {\n  userCertificate: ArrayBuffer;\n  revocationDate: Time;\n  crlEntryExtensions?: Extension<TExtensionValue>[];\n}\n\nexport class CRL extends AsnData<CertificateList> {\n  public readonly issuer: INameJSON[];\n\n  public readonly version: number;\n\n  public readonly lastUpdate: Date;\n\n  public readonly nextUpdate: Date;\n\n  public extensions: Extension<TExtensionValue>[];\n\n  public revokedCertificates: IRevokedCertificate[];\n\n  public thumbprints: Record<string, string> = {};\n\n  public type: string = 'X.509 Certificate Revocation List';\n\n  constructor(raw: string) {\n    super(certificateRawToBuffer(raw), CertificateList);\n\n    const { tbsCertList } = this.asn;\n\n    this.issuer = new Name(tbsCertList.issuer).toJSON();\n    this.version = tbsCertList.version + 1;\n    this.lastUpdate = tbsCertList.thisUpdate.getTime();\n    this.nextUpdate = tbsCertList.nextUpdate.getTime();\n\n    this.revokedCertificates = (tbsCertList.revokedCertificates || [])\n      .map((revokedCertificate) => ({\n        revocationDate: revokedCertificate.revocationDate,\n        userCertificate: revokedCertificate.userCertificate,\n        crlEntryExtensions: revokedCertificate.crlEntryExtensions\n          ?.map((e) => new Extension(AsnConvert.serialize(e))),\n      }));\n  }\n\n  public async getThumbprint(\n    algorithm: string = 'SHA-1',\n  ): Promise<void> {\n    try {\n      const thumbprint = await getCertificateThumbprint(algorithm, this.raw);\n\n      if (thumbprint) {\n        this.thumbprints[algorithm] = Convert.ToHex(thumbprint);\n      }\n    } catch (error) {\n      console.error('Error thumbprint get:', error);\n    }\n  }\n\n  public get signature(): ISignature {\n    const { signature, signatureAlgorithm } = this.asn;\n\n    return {\n      value: signature,\n      algorithm: signatureAlgorithm.algorithm,\n    };\n  }\n\n  public get commonName(): string {\n    if (!this.issuer) {\n      return '';\n    }\n\n    for (let i = 0; i < this.issuer.length; i += 1) {\n      const name = this.issuer[i];\n\n      if (name.shortName === 'CN' || name.shortName === 'E' || name.shortName === 'O') {\n        return name.value;\n      }\n    }\n\n    return '';\n  }\n\n  public parseExtensions() {\n    const { tbsCertList } = this.asn;\n\n    if (tbsCertList.crlExtensions) {\n      this.extensions = tbsCertList.crlExtensions\n        .map((e) => new Extension(AsnConvert.serialize(e)));\n    }\n  }\n\n  public exportAsBase64() {\n    return Convert.ToBase64(this.raw);\n  }\n\n  public exportAsHexFormatted() {\n    return hexFormat(Convert.ToHex(this.raw));\n  }\n\n  public exportAsPemFormatted() {\n    return `-----BEGIN X509 CRL-----\\n${base64Format(this.exportAsBase64())}\\n-----END X509 CRL-----`;\n  }\n\n  public downloadAsPEM(name?: string) {\n    Download.crl.asPEM(\n      this.exportAsPemFormatted(),\n      name || this.commonName,\n    );\n  }\n\n  public downloadAsDER(name?: string) {\n    Download.crl.asDER(\n      this.exportAsHexFormatted(),\n      name || this.commonName,\n    );\n  }\n}\n"],"mappings":"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"}