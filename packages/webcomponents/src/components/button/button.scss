@import 'component';

:host {
  display: inline-block;
  width: auto;
  cursor: pointer;
  position: relative;

  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  touch-action: manipulation;
  -webkit-user-drag: none;
  -ms-content-zooming: none;
  word-wrap: break-word;
  text-size-adjust: none;

  --pv-button-padding-end: 5px;
  --pv-button-padding-start: 5px;
}

.button {
  @include propertyFontFamilyVariable();
  @include propertyFontSizeVariable(b3);
  @include propertyFontSpacingVariable();
  display: inline-flex;
  align-items: stretch;
  justify-content: center;
  width: 100%;
  border-style: solid;
  border-width: 1px;
  font-weight: 400;
  text-decoration: none;
  user-select: none;
  white-space: nowrap;
  vertical-align: middle;
  cursor: inherit;
  height: 30px;
  line-height: 30px;
  border-radius: 2px;
  padding: 0 5px;
  padding: 0 var(--pv-button-padding-end) 0 var(--pv-button-padding-start);

  &::-moz-focus-inner {
    border: 0;
  }

  &:focus {
    outline: none;
    box-shadow: 0 4px 10px 0 rgba(var(getColorVariableName(dark)), 0.10);
  }

  &[disabled] {
    opacity: 0.5;
    cursor: not-allowed;
  }

  &_stroke {
    @include propertyColorVariable(border-color, primary, 0.3);
    @include propertyColorVariable(color, primary);
    background-color: transparent;
  }

  &_fill {
    @include propertyColorVariable(border-color, primary);
    @include propertyColorVariable(background-color, primary);
    @include propertyColorVariable(color, light);
  }

  &_label {
    transition: opacity 200ms;
  }

  &:hover {
    .button_label {
      opacity: 0.7;
    }
  }
}
